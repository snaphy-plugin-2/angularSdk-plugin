// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "User",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Users/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__findById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__destroyById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__updateById__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__get__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries accessTokens of User.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Users/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__create__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__delete__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$__count__accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Counts accessTokens of User.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#create
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createMany
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#upsert
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Users",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#exists
             * @methodOf lbServices.User
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Users/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Users/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#find
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Users",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findOne
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Users/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#updateAll
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Users/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#deleteById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Users/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#count
             * @methodOf lbServices.User
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Users/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$updateAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Users/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createChangeStream
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Users/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#login
             * @methodOf lbServices.User
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Users/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#logout
             * @methodOf lbServices.User
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Users/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#confirm
             * @methodOf lbServices.User
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Users/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#resetPassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Users/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getSchema
             * @methodOf lbServices.User
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Users/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getAbsoluteSchema
             * @methodOf lbServices.User
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Users/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#save
             * @methodOf lbServices.User
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Users/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getDetailSchema
             * @methodOf lbServices.User
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Users/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getModelRelationSchema
             * @methodOf lbServices.User
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Users/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getCurrent
             * @methodOf lbServices.User
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Users" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.User#updateOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.User#update
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.User#destroyById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#removeById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.User#modelName
        * @propertyOf lbServices.User
        * @description
        * The name of the model represented by this $resource,
        * i.e. `User`.
        */
        R.modelName = "User";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RoleMapping
 * @header lbServices.RoleMapping
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RoleMapping` model.
 *
 * **Details**
 *
 * Map principals to roles
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RoleMapping",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/RoleMappings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RoleMapping.role() instead.
            "prototype$__get__role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#create
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createMany
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#upsert
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RoleMappings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#exists
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RoleMappings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RoleMappings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#find
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findOne
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RoleMappings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateAll
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RoleMappings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#deleteById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RoleMappings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#count
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RoleMappings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#prototype$updateAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RoleMappings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createChangeStream
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RoleMappings/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#getSchema
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/RoleMappings/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#getAbsoluteSchema
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/RoleMappings/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#save
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/RoleMappings/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#getDetailSchema
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/RoleMappings/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#getModelRelationSchema
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/RoleMappings/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.findById() instead.
            "::findById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "::destroyById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "::updateById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "::get::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "::create::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.createMany() instead.
            "::createMany::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "::delete::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "::count::Role::principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#update
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#destroyById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#removeById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.RoleMapping#modelName
        * @propertyOf lbServices.RoleMapping
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RoleMapping`.
        */
        R.modelName = "RoleMapping";


            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#role
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Fetches belongsTo relation role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.role = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::RoleMapping::role"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Role
 * @header lbServices.Role
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Role` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Role",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Roles/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Role.principals.findById() instead.
            "prototype$__findById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "prototype$__destroyById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "prototype$__updateById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "prototype$__get__principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "prototype$__create__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "prototype$__delete__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "prototype$__count__principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createChangeStream
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Roles/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#verifyRole
             * @methodOf lbServices.Role
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `role` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `isInRole` – `{boolean=}` -
             */
            "verifyRole": {
              url: urlBase + "/Roles/verifyRole",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#getSchema
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Roles/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#getAbsoluteSchema
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Roles/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#save
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Roles/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#getDetailSchema
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Roles/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#getModelRelationSchema
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Roles/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use RoleMapping.role() instead.
            "::get::RoleMapping::role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Role#modelName
        * @propertyOf lbServices.Role
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Role`.
        */
        R.modelName = "Role";

    /**
     * @ngdoc object
     * @name lbServices.Role.principals
     * @header lbServices.Role.principals
     * @object
     * @description
     *
     * The object `Role.principals` groups methods
     * manipulating `RoleMapping` instances related to `Role`.
     *
     * Call {@link lbServices.Role#principals Role.principals()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Role#principals
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Queries principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::get::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#count
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Counts principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.principals.count = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::count::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#create
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.create = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::create::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#createMany
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.createMany = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::createMany::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyAll
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Deletes all principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyAll = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::delete::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Delete a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::destroyById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#findById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Find a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.findById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::findById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#updateById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Update a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.updateById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::updateById::Role::principals"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Employee
 * @header lbServices.Employee
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Employee` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Employee",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Employees/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Employee.department() instead.
            "prototype$__get__department": {
              url: urlBase + "/Employees/:id/department",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#findById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Employees/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#find
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Employees",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#count
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Employees/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#createChangeStream
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Employees/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#login
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Employees/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#logout
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Employees/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#isAdmin
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `isAdmin` – `{boolean=}` -
             */
            "isAdmin": {
              url: urlBase + "/Employees/isAdmin",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#getAuthorisedRoles
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `roles` – `{string=}` -
             */
            "getAuthorisedRoles": {
              url: urlBase + "/Employees/getAuthorisedRoles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#getSchema
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Employees/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#getAbsoluteSchema
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Employees/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#save
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Employees/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#getDetailSchema
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Employees/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#getModelRelationSchema
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Employees/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use Department.employees.findById() instead.
            "::findById::Department::employees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employees/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.employees.destroyById() instead.
            "::destroyById::Department::employees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employees/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.employees.updateById() instead.
            "::updateById::Department::employees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employees/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.employees() instead.
            "::get::Department::employees": {
              isArray: true,
              url: urlBase + "/Departments/:id/employees",
              method: "GET",
            },

            // INTERNAL. Use Department.employees.create() instead.
            "::create::Department::employees": {
              url: urlBase + "/Departments/:id/employees",
              method: "POST",
            },

            // INTERNAL. Use Department.employees.createMany() instead.
            "::createMany::Department::employees": {
              isArray: true,
              url: urlBase + "/Departments/:id/employees",
              method: "POST",
            },

            // INTERNAL. Use Department.employees.destroyAll() instead.
            "::delete::Department::employees": {
              url: urlBase + "/Departments/:id/employees",
              method: "DELETE",
            },

            // INTERNAL. Use Department.employees.count() instead.
            "::count::Department::employees": {
              url: urlBase + "/Departments/:id/employees/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#getCurrent
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Employees" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



        /**
         * @ngdoc method
         * @name lbServices.Employee#getCachedCurrent
         * @methodOf lbServices.Employee
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Employee#login} or
         * {@link lbServices.Employee#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Employee instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Employee#isAuthenticated
         * @methodOf lbServices.Employee
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Employee#getCurrentId
         * @methodOf lbServices.Employee
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Employee#modelName
        * @propertyOf lbServices.Employee
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Employee`.
        */
        R.modelName = "Employee";


            /**
             * @ngdoc method
             * @name lbServices.Employee#department
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Fetches belongsTo relation department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyUser id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::Employee::department"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Customer
 * @header lbServices.Customer
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Customer` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Customer",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Customers/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Customer.facebookAccessToken.findById() instead.
            "prototype$__findById__facebookAccessToken": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/facebookAccessToken/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.facebookAccessToken.destroyById() instead.
            "prototype$__destroyById__facebookAccessToken": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/facebookAccessToken/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.facebookAccessToken.updateById() instead.
            "prototype$__updateById__facebookAccessToken": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/facebookAccessToken/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.facebookAccessToken() instead.
            "prototype$__get__facebookAccessToken": {
              isArray: true,
              url: urlBase + "/Customers/:id/facebookAccessToken",
              method: "GET",
            },

            // INTERNAL. Use Customer.facebookAccessToken.create() instead.
            "prototype$__create__facebookAccessToken": {
              url: urlBase + "/Customers/:id/facebookAccessToken",
              method: "POST",
            },

            // INTERNAL. Use Customer.facebookAccessToken.destroyAll() instead.
            "prototype$__delete__facebookAccessToken": {
              url: urlBase + "/Customers/:id/facebookAccessToken",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.facebookAccessToken.count() instead.
            "prototype$__count__facebookAccessToken": {
              url: urlBase + "/Customers/:id/facebookAccessToken/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#createChangeStream
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Customers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#login
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Customers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#logout
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Customers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#getSchema
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Customers/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#getAbsoluteSchema
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Customers/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#save
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Customers/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#getDetailSchema
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Customers/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#getModelRelationSchema
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Customers/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#subscribe
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Create namespace and rooms for listening to changes in the model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `where` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "subscribe": {
              url: urlBase + "/Customers/subscribe",
              method: "POST",
            },

            // INTERNAL. Use FacebookAccessToken.customer() instead.
            "::get::FacebookAccessToken::customer": {
              url: urlBase + "/FacebookAccessTokens/:id/customer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#getCurrent
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Customers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



        /**
         * @ngdoc method
         * @name lbServices.Customer#getCachedCurrent
         * @methodOf lbServices.Customer
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Customer#login} or
         * {@link lbServices.Customer#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Customer instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Customer#isAuthenticated
         * @methodOf lbServices.Customer
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Customer#getCurrentId
         * @methodOf lbServices.Customer
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Customer#modelName
        * @propertyOf lbServices.Customer
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Customer`.
        */
        R.modelName = "Customer";

    /**
     * @ngdoc object
     * @name lbServices.Customer.facebookAccessToken
     * @header lbServices.Customer.facebookAccessToken
     * @object
     * @description
     *
     * The object `Customer.facebookAccessToken` groups methods
     * manipulating `FacebookAccessToken` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#facebookAccessToken Customer.facebookAccessToken()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#facebookAccessToken
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries facebookAccessToken of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyUser id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
        R.facebookAccessToken = function() {
          var TargetResource = $injector.get("FacebookAccessToken");
          var action = TargetResource["::get::Customer::facebookAccessToken"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.facebookAccessToken#count
             * @methodOf lbServices.Customer.facebookAccessToken
             *
             * @description
             *
             * Counts facebookAccessToken of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyUser id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.facebookAccessToken.count = function() {
          var TargetResource = $injector.get("FacebookAccessToken");
          var action = TargetResource["::count::Customer::facebookAccessToken"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.facebookAccessToken#create
             * @methodOf lbServices.Customer.facebookAccessToken
             *
             * @description
             *
             * Creates a new instance in facebookAccessToken of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
        R.facebookAccessToken.create = function() {
          var TargetResource = $injector.get("FacebookAccessToken");
          var action = TargetResource["::create::Customer::facebookAccessToken"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.facebookAccessToken#createMany
             * @methodOf lbServices.Customer.facebookAccessToken
             *
             * @description
             *
             * Creates a new instance in facebookAccessToken of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyUser id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
        R.facebookAccessToken.createMany = function() {
          var TargetResource = $injector.get("FacebookAccessToken");
          var action = TargetResource["::createMany::Customer::facebookAccessToken"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.facebookAccessToken#destroyAll
             * @methodOf lbServices.Customer.facebookAccessToken
             *
             * @description
             *
             * Deletes all facebookAccessToken of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyUser id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.facebookAccessToken.destroyAll = function() {
          var TargetResource = $injector.get("FacebookAccessToken");
          var action = TargetResource["::delete::Customer::facebookAccessToken"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.facebookAccessToken#destroyById
             * @methodOf lbServices.Customer.facebookAccessToken
             *
             * @description
             *
             * Delete a related item by id for facebookAccessToken.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyUser id
             *
             *  - `fk` – `{*}` - Foreign key for facebookAccessToken
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.facebookAccessToken.destroyById = function() {
          var TargetResource = $injector.get("FacebookAccessToken");
          var action = TargetResource["::destroyById::Customer::facebookAccessToken"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.facebookAccessToken#findById
             * @methodOf lbServices.Customer.facebookAccessToken
             *
             * @description
             *
             * Find a related item by id for facebookAccessToken.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyUser id
             *
             *  - `fk` – `{*}` - Foreign key for facebookAccessToken
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
        R.facebookAccessToken.findById = function() {
          var TargetResource = $injector.get("FacebookAccessToken");
          var action = TargetResource["::findById::Customer::facebookAccessToken"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.facebookAccessToken#updateById
             * @methodOf lbServices.Customer.facebookAccessToken
             *
             * @description
             *
             * Update a related item by id for facebookAccessToken.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyUser id
             *
             *  - `fk` – `{*}` - Foreign key for facebookAccessToken
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
        R.facebookAccessToken.updateById = function() {
          var TargetResource = $injector.get("FacebookAccessToken");
          var action = TargetResource["::updateById::Customer::facebookAccessToken"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AdminEmail
 * @header lbServices.AdminEmail
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AdminEmail` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AdminEmail",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/adminEmails/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.AdminEmail#getSchema
             * @methodOf lbServices.AdminEmail
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/adminEmails/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdminEmail#getAbsoluteSchema
             * @methodOf lbServices.AdminEmail
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/adminEmails/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdminEmail#save
             * @methodOf lbServices.AdminEmail
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/adminEmails/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdminEmail#getDetailSchema
             * @methodOf lbServices.AdminEmail
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/adminEmails/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdminEmail#getModelRelationSchema
             * @methodOf lbServices.AdminEmail
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/adminEmails/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdminEmail#sendMail
             * @methodOf lbServices.AdminEmail
             *
             * @description
             *
             * Remote method for sending text mail from the frontend.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `to` – `{*=}` -
             *
             *  - `subject` – `{string=}` -
             *
             *  - `html` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `info` – `{string=}` -
             */
            "sendMail": {
              url: urlBase + "/adminEmails/sendMail",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AdminEmail#getMailSchema
             * @methodOf lbServices.AdminEmail
             *
             * @description
             *
             * Send the mail schema of the to the browser.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getMailSchema": {
              url: urlBase + "/adminEmails/getMailSchema",
              method: "POST",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.AdminEmail#modelName
        * @propertyOf lbServices.AdminEmail
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AdminEmail`.
        */
        R.modelName = "AdminEmail";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Container",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/containers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainers
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/containers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#createContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "createContainer": {
              url: urlBase + "/containers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#destroyContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/containers/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/containers/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFiles
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/containers/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#removeFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#upload
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "upload": {
              url: urlBase + "/containers/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#download
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/containers/:container/download/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getSchema
             * @methodOf lbServices.Container
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/containers/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getAbsoluteSchema
             * @methodOf lbServices.Container
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/containers/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#save
             * @methodOf lbServices.Container
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/containers/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getDetailSchema
             * @methodOf lbServices.Container
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/containers/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getModelRelationSchema
             * @methodOf lbServices.Container
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/containers/getModelRelationSchema",
              method: "POST",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Container#modelName
        * @propertyOf lbServices.Container
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Container`.
        */
        R.modelName = "Container";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Application
 * @header lbServices.Application
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Application` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Application",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/applications/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Application#create
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/applications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#createMany
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/applications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#upsert
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/applications",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#exists
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/applications/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#findById
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/applications/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#find
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/applications",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#findOne
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/applications/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#updateAll
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/applications/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#deleteById
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/applications/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#count
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/applications/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#prototype$updateAttributes
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Application id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/applications/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#createChangeStream
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/applications/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#getSchema
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/applications/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#getAbsoluteSchema
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/applications/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#save
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/applications/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#getDetailSchema
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/applications/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Application#getModelRelationSchema
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/applications/getModelRelationSchema",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Application#updateOrCreate
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Application#update
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Application#destroyById
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Application#removeById
             * @methodOf lbServices.Application
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Application` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Application#modelName
        * @propertyOf lbServices.Application
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Application`.
        */
        R.modelName = "Application";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Installation
 * @header lbServices.Installation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Installation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Installation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/installations/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Installation#findByApp
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Find installations by application id
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `deviceType` – `{string=}` - Device type
             *
             *  - `appId` – `{string=}` - Application id
             *
             *  - `appVersion` – `{string=}` - Application version
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "findByApp": {
              url: urlBase + "/installations/byApp",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#findByUser
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Find installations by user id
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `deviceType` – `{string=}` - Device type
             *
             *  - `userId` – `{string=}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "findByUser": {
              url: urlBase + "/installations/byUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#findBySubscriptions
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Find installations by subscriptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `deviceType` – `{string=}` - Device type
             *
             *  - `subscriptions` – `{string=}` - Subscriptions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "findBySubscriptions": {
              url: urlBase + "/installations/bySubscriptions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#create
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/installations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#createMany
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/installations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#upsert
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/installations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#exists
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/installations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#findById
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/installations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#find
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/installations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#findOne
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/installations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#updateAll
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/installations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#deleteById
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/installations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#count
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/installations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#prototype$updateAttributes
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Installation id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/installations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#createChangeStream
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/installations/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#getSchema
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/installations/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#getAbsoluteSchema
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/installations/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#save
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/installations/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#getDetailSchema
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/installations/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Installation#getModelRelationSchema
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/installations/getModelRelationSchema",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Installation#updateOrCreate
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Installation#update
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Installation#destroyById
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Installation#removeById
             * @methodOf lbServices.Installation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Installation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Installation#modelName
        * @propertyOf lbServices.Installation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Installation`.
        */
        R.modelName = "Installation";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Notification
 * @header lbServices.Notification
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Notification` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Notification",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/notifications/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Notification#create
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/notifications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#createMany
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/notifications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#upsert
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/notifications",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#exists
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/notifications/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#findById
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/notifications/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#find
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/notifications",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#findOne
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/notifications/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#updateAll
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/notifications/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#deleteById
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/notifications/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#count
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/notifications/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#prototype$updateAttributes
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Notification id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/notifications/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#createChangeStream
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/notifications/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#getSchema
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/notifications/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#getAbsoluteSchema
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/notifications/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#save
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/notifications/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#getDetailSchema
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/notifications/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Notification#getModelRelationSchema
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/notifications/getModelRelationSchema",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Notification#updateOrCreate
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Notification#update
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Notification#destroyById
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Notification#removeById
             * @methodOf lbServices.Notification
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Notification` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Notification#modelName
        * @propertyOf lbServices.Notification
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Notification`.
        */
        R.modelName = "Notification";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Push
 * @header lbServices.Push
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Push` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Push",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Push/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Push#notifyByQuery
             * @methodOf lbServices.Push
             *
             * @description
             *
             * Send a push notification by installation query
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `deviceQuery` – `{object=}` - Installation query
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Push` object.)
             * </em>
             */
            "notifyByQuery": {
              url: urlBase + "/Push",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Push#getSchema
             * @methodOf lbServices.Push
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Push/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Push#getAbsoluteSchema
             * @methodOf lbServices.Push
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Push/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Push#save
             * @methodOf lbServices.Push
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Push/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Push#getDetailSchema
             * @methodOf lbServices.Push
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Push/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Push#getModelRelationSchema
             * @methodOf lbServices.Push
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Push/getModelRelationSchema",
              method: "POST",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Push#modelName
        * @propertyOf lbServices.Push
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Push`.
        */
        R.modelName = "Push";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Retailer
 * @header lbServices.Retailer
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Retailer` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Retailer",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Retailers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Retailer#prototype$__findById__accessTokens
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#prototype$__updateById__accessTokens
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Retailer.qrCodes.findById() instead.
            "prototype$__findById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/qrCodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Retailer.qrCodes.destroyById() instead.
            "prototype$__destroyById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/qrCodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.qrCodes.updateById() instead.
            "prototype$__updateById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/qrCodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Retailer.department.findById() instead.
            "prototype$__findById__department": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/department/:fk",
              method: "GET",
            },

            // INTERNAL. Use Retailer.department.destroyById() instead.
            "prototype$__destroyById__department": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/department/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.department.updateById() instead.
            "prototype$__updateById__department": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/department/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Retailer.retailerTransactions.findById() instead.
            "prototype$__findById__retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/retailerTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use Retailer.retailerTransactions.destroyById() instead.
            "prototype$__destroyById__retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/retailerTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.retailerTransactions.updateById() instead.
            "prototype$__updateById__retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/retailerTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Retailer.contactUs.findById() instead.
            "prototype$__findById__contactUs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/contactUs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Retailer.contactUs.destroyById() instead.
            "prototype$__destroyById__contactUs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/contactUs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.contactUs.updateById() instead.
            "prototype$__updateById__contactUs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/contactUs/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#prototype$__get__accessTokens
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Queries accessTokens of Retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Retailers/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#prototype$__create__accessTokens
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Retailers/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#prototype$__delete__accessTokens
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Retailers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#prototype$__count__accessTokens
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Counts accessTokens of Retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Retailers/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Retailer.qrCodes() instead.
            "prototype$__get__qrCodes": {
              isArray: true,
              url: urlBase + "/Retailers/:id/qrCodes",
              method: "GET",
            },

            // INTERNAL. Use Retailer.qrCodes.create() instead.
            "prototype$__create__qrCodes": {
              url: urlBase + "/Retailers/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use Retailer.qrCodes.destroyAll() instead.
            "prototype$__delete__qrCodes": {
              url: urlBase + "/Retailers/:id/qrCodes",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.qrCodes.count() instead.
            "prototype$__count__qrCodes": {
              url: urlBase + "/Retailers/:id/qrCodes/count",
              method: "GET",
            },

            // INTERNAL. Use Retailer.department() instead.
            "prototype$__get__department": {
              isArray: true,
              url: urlBase + "/Retailers/:id/department",
              method: "GET",
            },

            // INTERNAL. Use Retailer.department.create() instead.
            "prototype$__create__department": {
              url: urlBase + "/Retailers/:id/department",
              method: "POST",
            },

            // INTERNAL. Use Retailer.department.destroyAll() instead.
            "prototype$__delete__department": {
              url: urlBase + "/Retailers/:id/department",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.department.count() instead.
            "prototype$__count__department": {
              url: urlBase + "/Retailers/:id/department/count",
              method: "GET",
            },

            // INTERNAL. Use Retailer.retailerTransactions() instead.
            "prototype$__get__retailerTransactions": {
              isArray: true,
              url: urlBase + "/Retailers/:id/retailerTransactions",
              method: "GET",
            },

            // INTERNAL. Use Retailer.retailerTransactions.create() instead.
            "prototype$__create__retailerTransactions": {
              url: urlBase + "/Retailers/:id/retailerTransactions",
              method: "POST",
            },

            // INTERNAL. Use Retailer.retailerTransactions.destroyAll() instead.
            "prototype$__delete__retailerTransactions": {
              url: urlBase + "/Retailers/:id/retailerTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.retailerTransactions.count() instead.
            "prototype$__count__retailerTransactions": {
              url: urlBase + "/Retailers/:id/retailerTransactions/count",
              method: "GET",
            },

            // INTERNAL. Use Retailer.contactUs() instead.
            "prototype$__get__contactUs": {
              isArray: true,
              url: urlBase + "/Retailers/:id/contactUs",
              method: "GET",
            },

            // INTERNAL. Use Retailer.contactUs.create() instead.
            "prototype$__create__contactUs": {
              url: urlBase + "/Retailers/:id/contactUs",
              method: "POST",
            },

            // INTERNAL. Use Retailer.contactUs.destroyAll() instead.
            "prototype$__delete__contactUs": {
              url: urlBase + "/Retailers/:id/contactUs",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.contactUs.count() instead.
            "prototype$__count__contactUs": {
              url: urlBase + "/Retailers/:id/contactUs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#create
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Retailers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#createMany
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Retailers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#upsert
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Retailers",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#exists
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Retailers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#findById
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Retailers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#find
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Retailers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#findOne
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Retailers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#updateAll
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Retailers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#deleteById
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Retailers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#count
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Retailers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#prototype$updateAttributes
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Retailers/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#createChangeStream
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Retailers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#login
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Retailers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#logout
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Retailers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#confirm
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Retailers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#resetPassword
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Retailers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#getSchema
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Retailers/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#getAbsoluteSchema
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Retailers/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#save
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Retailers/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#getDetailSchema
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Retailers/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#getModelRelationSchema
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Retailers/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#requestOtp
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Request an otp to request the OTP
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `number` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Return success or error
             */
            "requestOtp": {
              url: urlBase + "/Retailers/requestOtp",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#retryOtp
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Retry an otp
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `number` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Return success or error
             */
            "retryOtp": {
              url: urlBase + "/Retailers/retryOtp",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#loginWithOtp
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Login with an otp provided
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `number` – `{string}` -
             *
             *  - `otp` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
             *
             */
            "loginWithOtp": {
              url: urlBase + "/Retailers/loginWithOtp",
              method: "POST",
            },

            // INTERNAL. Use QrCode.retailer() instead.
            "::get::QrCode::retailer": {
              url: urlBase + "/QrCodes/:id/retailer",
              method: "GET",
            },

            // INTERNAL. Use State.retailers.findById() instead.
            "::findById::State::retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/retailers/:fk",
              method: "GET",
            },

            // INTERNAL. Use State.retailers.destroyById() instead.
            "::destroyById::State::retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/retailers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use State.retailers.updateById() instead.
            "::updateById::State::retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/retailers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use State.retailers() instead.
            "::get::State::retailers": {
              isArray: true,
              url: urlBase + "/States/:id/retailers",
              method: "GET",
            },

            // INTERNAL. Use State.retailers.create() instead.
            "::create::State::retailers": {
              url: urlBase + "/States/:id/retailers",
              method: "POST",
            },

            // INTERNAL. Use State.retailers.createMany() instead.
            "::createMany::State::retailers": {
              isArray: true,
              url: urlBase + "/States/:id/retailers",
              method: "POST",
            },

            // INTERNAL. Use State.retailers.destroyAll() instead.
            "::delete::State::retailers": {
              url: urlBase + "/States/:id/retailers",
              method: "DELETE",
            },

            // INTERNAL. Use State.retailers.count() instead.
            "::count::State::retailers": {
              url: urlBase + "/States/:id/retailers/count",
              method: "GET",
            },

            // INTERNAL. Use City.retailers.findById() instead.
            "::findById::City::retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/retailers/:fk",
              method: "GET",
            },

            // INTERNAL. Use City.retailers.destroyById() instead.
            "::destroyById::City::retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/retailers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use City.retailers.updateById() instead.
            "::updateById::City::retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/retailers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use City.retailers() instead.
            "::get::City::retailers": {
              isArray: true,
              url: urlBase + "/Cities/:id/retailers",
              method: "GET",
            },

            // INTERNAL. Use City.retailers.create() instead.
            "::create::City::retailers": {
              url: urlBase + "/Cities/:id/retailers",
              method: "POST",
            },

            // INTERNAL. Use City.retailers.createMany() instead.
            "::createMany::City::retailers": {
              isArray: true,
              url: urlBase + "/Cities/:id/retailers",
              method: "POST",
            },

            // INTERNAL. Use City.retailers.destroyAll() instead.
            "::delete::City::retailers": {
              url: urlBase + "/Cities/:id/retailers",
              method: "DELETE",
            },

            // INTERNAL. Use City.retailers.count() instead.
            "::count::City::retailers": {
              url: urlBase + "/Cities/:id/retailers/count",
              method: "GET",
            },

            // INTERNAL. Use RetailerTransaction.retailer() instead.
            "::get::RetailerTransaction::retailer": {
              url: urlBase + "/RetailerTransactions/:id/retailer",
              method: "GET",
            },

            // INTERNAL. Use EarningHistory.retailer() instead.
            "::get::EarningHistory::retailer": {
              url: urlBase + "/EarningHistories/:id/retailer",
              method: "GET",
            },

            // INTERNAL. Use ContactUs.retailer() instead.
            "::get::ContactUs::retailer": {
              url: urlBase + "/ContactUs/:id/retailer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Retailer#getCurrent
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Retailers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Retailer#updateOrCreate
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Retailer#update
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Retailer#destroyById
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Retailer#removeById
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Retailer#getCachedCurrent
         * @methodOf lbServices.Retailer
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Retailer#login} or
         * {@link lbServices.Retailer#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Retailer instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Retailer#isAuthenticated
         * @methodOf lbServices.Retailer
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Retailer#getCurrentId
         * @methodOf lbServices.Retailer
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Retailer#modelName
        * @propertyOf lbServices.Retailer
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Retailer`.
        */
        R.modelName = "Retailer";

    /**
     * @ngdoc object
     * @name lbServices.Retailer.qrCodes
     * @header lbServices.Retailer.qrCodes
     * @object
     * @description
     *
     * The object `Retailer.qrCodes` groups methods
     * manipulating `QrCode` instances related to `Retailer`.
     *
     * Call {@link lbServices.Retailer#qrCodes Retailer.qrCodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Retailer#qrCodes
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Queries qrCodes of Retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::get::Retailer::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.qrCodes#count
             * @methodOf lbServices.Retailer.qrCodes
             *
             * @description
             *
             * Counts qrCodes of Retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.qrCodes.count = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::count::Retailer::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.qrCodes#create
             * @methodOf lbServices.Retailer.qrCodes
             *
             * @description
             *
             * Creates a new instance in qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.create = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::create::Retailer::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.qrCodes#createMany
             * @methodOf lbServices.Retailer.qrCodes
             *
             * @description
             *
             * Creates a new instance in qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.createMany = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::createMany::Retailer::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.qrCodes#destroyAll
             * @methodOf lbServices.Retailer.qrCodes
             *
             * @description
             *
             * Deletes all qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodes.destroyAll = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::delete::Retailer::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.qrCodes#destroyById
             * @methodOf lbServices.Retailer.qrCodes
             *
             * @description
             *
             * Delete a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodes.destroyById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::destroyById::Retailer::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.qrCodes#findById
             * @methodOf lbServices.Retailer.qrCodes
             *
             * @description
             *
             * Find a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.findById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::findById::Retailer::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.qrCodes#updateById
             * @methodOf lbServices.Retailer.qrCodes
             *
             * @description
             *
             * Update a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.updateById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::updateById::Retailer::qrCodes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Retailer.department
     * @header lbServices.Retailer.department
     * @object
     * @description
     *
     * The object `Retailer.department` groups methods
     * manipulating `Department` instances related to `Retailer`.
     *
     * Call {@link lbServices.Retailer#department Retailer.department()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Retailer#department
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Queries department of Retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::Retailer::department"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.department#count
             * @methodOf lbServices.Retailer.department
             *
             * @description
             *
             * Counts department of Retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.department.count = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::count::Retailer::department"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.department#create
             * @methodOf lbServices.Retailer.department
             *
             * @description
             *
             * Creates a new instance in department of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department.create = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::create::Retailer::department"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.department#createMany
             * @methodOf lbServices.Retailer.department
             *
             * @description
             *
             * Creates a new instance in department of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department.createMany = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::createMany::Retailer::department"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.department#destroyAll
             * @methodOf lbServices.Retailer.department
             *
             * @description
             *
             * Deletes all department of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.department.destroyAll = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::delete::Retailer::department"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.department#destroyById
             * @methodOf lbServices.Retailer.department
             *
             * @description
             *
             * Delete a related item by id for department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for department
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.department.destroyById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::destroyById::Retailer::department"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.department#findById
             * @methodOf lbServices.Retailer.department
             *
             * @description
             *
             * Find a related item by id for department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for department
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department.findById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::findById::Retailer::department"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.department#updateById
             * @methodOf lbServices.Retailer.department
             *
             * @description
             *
             * Update a related item by id for department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for department
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department.updateById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::updateById::Retailer::department"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Retailer.retailerTransactions
     * @header lbServices.Retailer.retailerTransactions
     * @object
     * @description
     *
     * The object `Retailer.retailerTransactions` groups methods
     * manipulating `RetailerTransaction` instances related to `Retailer`.
     *
     * Call {@link lbServices.Retailer#retailerTransactions Retailer.retailerTransactions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Retailer#retailerTransactions
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Queries retailerTransactions of Retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::get::Retailer::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.retailerTransactions#count
             * @methodOf lbServices.Retailer.retailerTransactions
             *
             * @description
             *
             * Counts retailerTransactions of Retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.retailerTransactions.count = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::count::Retailer::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.retailerTransactions#create
             * @methodOf lbServices.Retailer.retailerTransactions
             *
             * @description
             *
             * Creates a new instance in retailerTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.create = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::create::Retailer::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.retailerTransactions#createMany
             * @methodOf lbServices.Retailer.retailerTransactions
             *
             * @description
             *
             * Creates a new instance in retailerTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.createMany = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::createMany::Retailer::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.retailerTransactions#destroyAll
             * @methodOf lbServices.Retailer.retailerTransactions
             *
             * @description
             *
             * Deletes all retailerTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.retailerTransactions.destroyAll = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::delete::Retailer::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.retailerTransactions#destroyById
             * @methodOf lbServices.Retailer.retailerTransactions
             *
             * @description
             *
             * Delete a related item by id for retailerTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for retailerTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.retailerTransactions.destroyById = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::destroyById::Retailer::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.retailerTransactions#findById
             * @methodOf lbServices.Retailer.retailerTransactions
             *
             * @description
             *
             * Find a related item by id for retailerTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for retailerTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.findById = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::findById::Retailer::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.retailerTransactions#updateById
             * @methodOf lbServices.Retailer.retailerTransactions
             *
             * @description
             *
             * Update a related item by id for retailerTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for retailerTransactions
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.updateById = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::updateById::Retailer::retailerTransactions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Retailer.contactUs
     * @header lbServices.Retailer.contactUs
     * @object
     * @description
     *
     * The object `Retailer.contactUs` groups methods
     * manipulating `ContactUs` instances related to `Retailer`.
     *
     * Call {@link lbServices.Retailer#contactUs Retailer.contactUs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Retailer#contactUs
             * @methodOf lbServices.Retailer
             *
             * @description
             *
             * Queries contactUs of Retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
        R.contactUs = function() {
          var TargetResource = $injector.get("ContactUs");
          var action = TargetResource["::get::Retailer::contactUs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.contactUs#count
             * @methodOf lbServices.Retailer.contactUs
             *
             * @description
             *
             * Counts contactUs of Retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.contactUs.count = function() {
          var TargetResource = $injector.get("ContactUs");
          var action = TargetResource["::count::Retailer::contactUs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.contactUs#create
             * @methodOf lbServices.Retailer.contactUs
             *
             * @description
             *
             * Creates a new instance in contactUs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
        R.contactUs.create = function() {
          var TargetResource = $injector.get("ContactUs");
          var action = TargetResource["::create::Retailer::contactUs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.contactUs#createMany
             * @methodOf lbServices.Retailer.contactUs
             *
             * @description
             *
             * Creates a new instance in contactUs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
        R.contactUs.createMany = function() {
          var TargetResource = $injector.get("ContactUs");
          var action = TargetResource["::createMany::Retailer::contactUs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.contactUs#destroyAll
             * @methodOf lbServices.Retailer.contactUs
             *
             * @description
             *
             * Deletes all contactUs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contactUs.destroyAll = function() {
          var TargetResource = $injector.get("ContactUs");
          var action = TargetResource["::delete::Retailer::contactUs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.contactUs#destroyById
             * @methodOf lbServices.Retailer.contactUs
             *
             * @description
             *
             * Delete a related item by id for contactUs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for contactUs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contactUs.destroyById = function() {
          var TargetResource = $injector.get("ContactUs");
          var action = TargetResource["::destroyById::Retailer::contactUs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.contactUs#findById
             * @methodOf lbServices.Retailer.contactUs
             *
             * @description
             *
             * Find a related item by id for contactUs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for contactUs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
        R.contactUs.findById = function() {
          var TargetResource = $injector.get("ContactUs");
          var action = TargetResource["::findById::Retailer::contactUs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Retailer.contactUs#updateById
             * @methodOf lbServices.Retailer.contactUs
             *
             * @description
             *
             * Update a related item by id for contactUs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for contactUs
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
        R.contactUs.updateById = function() {
          var TargetResource = $injector.get("ContactUs");
          var action = TargetResource["::updateById::Retailer::contactUs"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SnaphyBase
 * @header lbServices.SnaphyBase
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SnaphyBase` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SnaphyBase",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/SnaphyBases/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#create
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SnaphyBases",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#createMany
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SnaphyBases",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#upsert
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SnaphyBases",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#exists
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SnaphyBases/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#findById
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SnaphyBases/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#find
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SnaphyBases",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#findOne
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SnaphyBases/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#updateAll
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SnaphyBases/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#deleteById
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SnaphyBases/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#count
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SnaphyBases/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#prototype$updateAttributes
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SnaphyBases/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#createChangeStream
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SnaphyBases/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#getSchema
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/SnaphyBases/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#getAbsoluteSchema
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/SnaphyBases/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#save
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/SnaphyBases/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#getDetailSchema
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/SnaphyBases/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#getModelRelationSchema
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/SnaphyBases/getModelRelationSchema",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#updateOrCreate
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#update
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#destroyById
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyBase#removeById
             * @methodOf lbServices.SnaphyBase
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyBase` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SnaphyBase#modelName
        * @propertyOf lbServices.SnaphyBase
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SnaphyBase`.
        */
        R.modelName = "SnaphyBase";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.CompanyInfo
 * @header lbServices.CompanyInfo
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CompanyInfo` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "CompanyInfo",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/CompanyInfos/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#create
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/CompanyInfos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#createMany
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/CompanyInfos",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#upsert
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/CompanyInfos",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#exists
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/CompanyInfos/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#findById
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/CompanyInfos/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#find
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/CompanyInfos",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#findOne
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/CompanyInfos/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#updateAll
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/CompanyInfos/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#deleteById
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/CompanyInfos/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#count
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/CompanyInfos/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#prototype$updateAttributes
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/CompanyInfos/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#createChangeStream
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/CompanyInfos/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#getSchema
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/CompanyInfos/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#getAbsoluteSchema
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/CompanyInfos/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#save
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/CompanyInfos/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#getDetailSchema
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/CompanyInfos/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#getModelRelationSchema
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/CompanyInfos/getModelRelationSchema",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#updateOrCreate
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#update
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#destroyById
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CompanyInfo#removeById
             * @methodOf lbServices.CompanyInfo
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CompanyInfo` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.CompanyInfo#modelName
        * @propertyOf lbServices.CompanyInfo
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CompanyInfo`.
        */
        R.modelName = "CompanyInfo";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FacebookAccessToken
 * @header lbServices.FacebookAccessToken
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FacebookAccessToken` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FacebookAccessToken",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FacebookAccessTokens/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FacebookAccessToken.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/FacebookAccessTokens/:id/customer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#create
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FacebookAccessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#createMany
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FacebookAccessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#upsert
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/FacebookAccessTokens",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#exists
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FacebookAccessTokens/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#findById
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FacebookAccessTokens/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#find
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FacebookAccessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#findOne
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FacebookAccessTokens/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#updateAll
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/FacebookAccessTokens/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#deleteById
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FacebookAccessTokens/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#count
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FacebookAccessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#prototype$updateAttributes
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/FacebookAccessTokens/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#createChangeStream
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FacebookAccessTokens/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#getSchema
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/FacebookAccessTokens/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#getAbsoluteSchema
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/FacebookAccessTokens/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#save
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/FacebookAccessTokens/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#getDetailSchema
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/FacebookAccessTokens/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#getModelRelationSchema
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/FacebookAccessTokens/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use Customer.facebookAccessToken.findById() instead.
            "::findById::Customer::facebookAccessToken": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/facebookAccessToken/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.facebookAccessToken.destroyById() instead.
            "::destroyById::Customer::facebookAccessToken": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/facebookAccessToken/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.facebookAccessToken.updateById() instead.
            "::updateById::Customer::facebookAccessToken": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/facebookAccessToken/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.facebookAccessToken() instead.
            "::get::Customer::facebookAccessToken": {
              isArray: true,
              url: urlBase + "/Customers/:id/facebookAccessToken",
              method: "GET",
            },

            // INTERNAL. Use Customer.facebookAccessToken.create() instead.
            "::create::Customer::facebookAccessToken": {
              url: urlBase + "/Customers/:id/facebookAccessToken",
              method: "POST",
            },

            // INTERNAL. Use Customer.facebookAccessToken.createMany() instead.
            "::createMany::Customer::facebookAccessToken": {
              isArray: true,
              url: urlBase + "/Customers/:id/facebookAccessToken",
              method: "POST",
            },

            // INTERNAL. Use Customer.facebookAccessToken.destroyAll() instead.
            "::delete::Customer::facebookAccessToken": {
              url: urlBase + "/Customers/:id/facebookAccessToken",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.facebookAccessToken.count() instead.
            "::count::Customer::facebookAccessToken": {
              url: urlBase + "/Customers/:id/facebookAccessToken/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#updateOrCreate
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#update
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#destroyById
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#removeById
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FacebookAccessToken` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.FacebookAccessToken#modelName
        * @propertyOf lbServices.FacebookAccessToken
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FacebookAccessToken`.
        */
        R.modelName = "FacebookAccessToken";


            /**
             * @ngdoc method
             * @name lbServices.FacebookAccessToken#customer
             * @methodOf lbServices.FacebookAccessToken
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::FacebookAccessToken::customer"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AmazonImage
 * @header lbServices.AmazonImage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AmazonImage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AmazonImage",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/AmazonImages/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#create
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AmazonImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#createMany
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AmazonImages",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#upsert
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AmazonImages",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#exists
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AmazonImages/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#findById
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AmazonImages/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#find
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AmazonImages",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#findOne
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AmazonImages/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#updateAll
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AmazonImages/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#deleteById
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AmazonImages/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#count
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AmazonImages/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#prototype$updateAttributes
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AmazonImages/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#createChangeStream
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AmazonImages/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#getSchema
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/AmazonImages/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#getAbsoluteSchema
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/AmazonImages/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#save
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/AmazonImages/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#getDetailSchema
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/AmazonImages/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#getModelRelationSchema
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/AmazonImages/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#getUrl
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Get download url for the file. Also generates signed url automatically if provided.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
            "getUrl": {
              url: urlBase + "/AmazonImages/getUrl",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#updateOrCreate
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#update
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#destroyById
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AmazonImage#removeById
             * @methodOf lbServices.AmazonImage
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AmazonImage` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.AmazonImage#modelName
        * @propertyOf lbServices.AmazonImage
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AmazonImage`.
        */
        R.modelName = "AmazonImage";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SnaphyNotification
 * @header lbServices.SnaphyNotification
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SnaphyNotification` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SnaphyNotification",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/SnaphyNotifications/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#create
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SnaphyNotifications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#createMany
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SnaphyNotifications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#upsert
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SnaphyNotifications",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#exists
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SnaphyNotifications/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#findById
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SnaphyNotifications/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#find
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SnaphyNotifications",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#findOne
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SnaphyNotifications/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#updateAll
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SnaphyNotifications/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#deleteById
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SnaphyNotifications/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#count
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SnaphyNotifications/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#prototype$updateAttributes
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SnaphyNotifications/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#createChangeStream
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SnaphyNotifications/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#getSchema
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/SnaphyNotifications/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#getAbsoluteSchema
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/SnaphyNotifications/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#save
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/SnaphyNotifications/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#getDetailSchema
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/SnaphyNotifications/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#getModelRelationSchema
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/SnaphyNotifications/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#send
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Method to send notification to admin panel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `notificationData` – `{object}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Sends back a notification object.
             */
            "send": {
              url: urlBase + "/SnaphyNotifications/send",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#changeStatus
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Method to change status of notification to admin panel.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `notificationId` – `{string}` -
             *
             *  - `status` – `{string}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Change the status of notification.
             */
            "changeStatus": {
              url: urlBase + "/SnaphyNotifications/changeStatus",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#updateOrCreate
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#update
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#destroyById
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyNotification#removeById
             * @methodOf lbServices.SnaphyNotification
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyNotification` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SnaphyNotification#modelName
        * @propertyOf lbServices.SnaphyNotification
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SnaphyNotification`.
        */
        R.modelName = "SnaphyNotification";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.QrCode
 * @header lbServices.QrCode
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `QrCode` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "QrCode",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/QrCodes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use QrCode.retailer() instead.
            "prototype$__get__retailer": {
              url: urlBase + "/QrCodes/:id/retailer",
              method: "GET",
            },

            // INTERNAL. Use QrCode.department() instead.
            "prototype$__get__department": {
              url: urlBase + "/QrCodes/:id/department",
              method: "GET",
            },

            // INTERNAL. Use QrCode.product() instead.
            "prototype$__get__product": {
              url: urlBase + "/QrCodes/:id/product",
              method: "GET",
            },

            // INTERNAL. Use QrCode.retailerTransaction() instead.
            "prototype$__get__retailerTransaction": {
              url: urlBase + "/QrCodes/:id/retailerTransaction",
              method: "GET",
            },

            // INTERNAL. Use QrCode.qrCodeGroup() instead.
            "prototype$__get__qrCodeGroup": {
              url: urlBase + "/QrCodes/:id/qrCodeGroup",
              method: "GET",
            },

            // INTERNAL. Use QrCode.earningHistories.findById() instead.
            "prototype$__findById__earningHistories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodes/:id/earningHistories/:fk",
              method: "GET",
            },

            // INTERNAL. Use QrCode.earningHistories.destroyById() instead.
            "prototype$__destroyById__earningHistories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodes/:id/earningHistories/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use QrCode.earningHistories.updateById() instead.
            "prototype$__updateById__earningHistories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodes/:id/earningHistories/:fk",
              method: "PUT",
            },

            // INTERNAL. Use QrCode.earningHistories() instead.
            "prototype$__get__earningHistories": {
              isArray: true,
              url: urlBase + "/QrCodes/:id/earningHistories",
              method: "GET",
            },

            // INTERNAL. Use QrCode.earningHistories.create() instead.
            "prototype$__create__earningHistories": {
              url: urlBase + "/QrCodes/:id/earningHistories",
              method: "POST",
            },

            // INTERNAL. Use QrCode.earningHistories.destroyAll() instead.
            "prototype$__delete__earningHistories": {
              url: urlBase + "/QrCodes/:id/earningHistories",
              method: "DELETE",
            },

            // INTERNAL. Use QrCode.earningHistories.count() instead.
            "prototype$__count__earningHistories": {
              url: urlBase + "/QrCodes/:id/earningHistories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#create
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/QrCodes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#createMany
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/QrCodes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#upsert
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/QrCodes",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#exists
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/QrCodes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#findById
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/QrCodes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#find
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/QrCodes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#findOne
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/QrCodes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#updateAll
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/QrCodes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#deleteById
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/QrCodes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#count
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/QrCodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#prototype$updateAttributes
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/QrCodes/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#createChangeStream
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/QrCodes/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#getSchema
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/QrCodes/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#getAbsoluteSchema
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/QrCodes/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#save
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/QrCodes/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#getDetailSchema
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/QrCodes/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#getModelRelationSchema
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/QrCodes/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#qrCodeScan
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Get the qrCode data
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             *  - `qrCodeIds` – `{string=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Array of QrCode data.
             */
            "qrCodeScan": {
              isArray: true,
              url: urlBase + "/QrCodes/qrCodeScan",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCode#getTotalEarnedPoints
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Get qrcode total earned points.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Get total earned points
             */
            "getTotalEarnedPoints": {
              url: urlBase + "/QrCodes/getTotalEarnedPoints",
              method: "POST",
            },

            // INTERNAL. Use Retailer.qrCodes.findById() instead.
            "::findById::Retailer::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/qrCodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Retailer.qrCodes.destroyById() instead.
            "::destroyById::Retailer::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/qrCodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.qrCodes.updateById() instead.
            "::updateById::Retailer::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/qrCodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Retailer.qrCodes() instead.
            "::get::Retailer::qrCodes": {
              isArray: true,
              url: urlBase + "/Retailers/:id/qrCodes",
              method: "GET",
            },

            // INTERNAL. Use Retailer.qrCodes.create() instead.
            "::create::Retailer::qrCodes": {
              url: urlBase + "/Retailers/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use Retailer.qrCodes.createMany() instead.
            "::createMany::Retailer::qrCodes": {
              isArray: true,
              url: urlBase + "/Retailers/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use Retailer.qrCodes.destroyAll() instead.
            "::delete::Retailer::qrCodes": {
              url: urlBase + "/Retailers/:id/qrCodes",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.qrCodes.count() instead.
            "::count::Retailer::qrCodes": {
              url: urlBase + "/Retailers/:id/qrCodes/count",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodes.findById() instead.
            "::findById::Product::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodes.destroyById() instead.
            "::destroyById::Product::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Product.qrCodes.updateById() instead.
            "::updateById::Product::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Product.qrCodes() instead.
            "::get::Product::qrCodes": {
              isArray: true,
              url: urlBase + "/Products/:id/qrCodes",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodes.create() instead.
            "::create::Product::qrCodes": {
              url: urlBase + "/Products/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use Product.qrCodes.createMany() instead.
            "::createMany::Product::qrCodes": {
              isArray: true,
              url: urlBase + "/Products/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use Product.qrCodes.destroyAll() instead.
            "::delete::Product::qrCodes": {
              url: urlBase + "/Products/:id/qrCodes",
              method: "DELETE",
            },

            // INTERNAL. Use Product.qrCodes.count() instead.
            "::count::Product::qrCodes": {
              url: urlBase + "/Products/:id/qrCodes/count",
              method: "GET",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.findById() instead.
            "::findById::RetailerTransaction::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RetailerTransactions/:id/qrCodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.destroyById() instead.
            "::destroyById::RetailerTransaction::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RetailerTransactions/:id/qrCodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.updateById() instead.
            "::updateById::RetailerTransaction::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RetailerTransactions/:id/qrCodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes() instead.
            "::get::RetailerTransaction::qrCodes": {
              isArray: true,
              url: urlBase + "/RetailerTransactions/:id/qrCodes",
              method: "GET",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.create() instead.
            "::create::RetailerTransaction::qrCodes": {
              url: urlBase + "/RetailerTransactions/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.createMany() instead.
            "::createMany::RetailerTransaction::qrCodes": {
              isArray: true,
              url: urlBase + "/RetailerTransactions/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.destroyAll() instead.
            "::delete::RetailerTransaction::qrCodes": {
              url: urlBase + "/RetailerTransactions/:id/qrCodes",
              method: "DELETE",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.count() instead.
            "::count::RetailerTransaction::qrCodes": {
              url: urlBase + "/RetailerTransactions/:id/qrCodes/count",
              method: "GET",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.findById() instead.
            "::findById::QrCodeGroup::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodeGroups/:id/qrCodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.destroyById() instead.
            "::destroyById::QrCodeGroup::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodeGroups/:id/qrCodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.updateById() instead.
            "::updateById::QrCodeGroup::qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodeGroups/:id/qrCodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes() instead.
            "::get::QrCodeGroup::qrCodes": {
              isArray: true,
              url: urlBase + "/QrCodeGroups/:id/qrCodes",
              method: "GET",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.create() instead.
            "::create::QrCodeGroup::qrCodes": {
              url: urlBase + "/QrCodeGroups/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.createMany() instead.
            "::createMany::QrCodeGroup::qrCodes": {
              isArray: true,
              url: urlBase + "/QrCodeGroups/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.destroyAll() instead.
            "::delete::QrCodeGroup::qrCodes": {
              url: urlBase + "/QrCodeGroups/:id/qrCodes",
              method: "DELETE",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.count() instead.
            "::count::QrCodeGroup::qrCodes": {
              url: urlBase + "/QrCodeGroups/:id/qrCodes/count",
              method: "GET",
            },

            // INTERNAL. Use EarningHistory.qrCode() instead.
            "::get::EarningHistory::qrCode": {
              url: urlBase + "/EarningHistories/:id/qrCode",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.QrCode#updateOrCreate
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.QrCode#update
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.QrCode#destroyById
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.QrCode#removeById
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.QrCode#modelName
        * @propertyOf lbServices.QrCode
        * @description
        * The name of the model represented by this $resource,
        * i.e. `QrCode`.
        */
        R.modelName = "QrCode";


            /**
             * @ngdoc method
             * @name lbServices.QrCode#retailer
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Fetches belongsTo relation retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailer = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::get::QrCode::retailer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode#department
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Fetches belongsTo relation department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::QrCode::department"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode#product
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Fetches belongsTo relation product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::QrCode::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode#retailerTransaction
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Fetches belongsTo relation retailerTransaction.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransaction = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::get::QrCode::retailerTransaction"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode#qrCodeGroup
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Fetches belongsTo relation qrCodeGroup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroup = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::get::QrCode::qrCodeGroup"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.QrCode.earningHistories
     * @header lbServices.QrCode.earningHistories
     * @object
     * @description
     *
     * The object `QrCode.earningHistories` groups methods
     * manipulating `EarningHistory` instances related to `QrCode`.
     *
     * Call {@link lbServices.QrCode#earningHistories QrCode.earningHistories()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.QrCode#earningHistories
             * @methodOf lbServices.QrCode
             *
             * @description
             *
             * Queries earningHistories of QrCode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
        R.earningHistories = function() {
          var TargetResource = $injector.get("EarningHistory");
          var action = TargetResource["::get::QrCode::earningHistories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode.earningHistories#count
             * @methodOf lbServices.QrCode.earningHistories
             *
             * @description
             *
             * Counts earningHistories of QrCode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.earningHistories.count = function() {
          var TargetResource = $injector.get("EarningHistory");
          var action = TargetResource["::count::QrCode::earningHistories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode.earningHistories#create
             * @methodOf lbServices.QrCode.earningHistories
             *
             * @description
             *
             * Creates a new instance in earningHistories of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
        R.earningHistories.create = function() {
          var TargetResource = $injector.get("EarningHistory");
          var action = TargetResource["::create::QrCode::earningHistories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode.earningHistories#createMany
             * @methodOf lbServices.QrCode.earningHistories
             *
             * @description
             *
             * Creates a new instance in earningHistories of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
        R.earningHistories.createMany = function() {
          var TargetResource = $injector.get("EarningHistory");
          var action = TargetResource["::createMany::QrCode::earningHistories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode.earningHistories#destroyAll
             * @methodOf lbServices.QrCode.earningHistories
             *
             * @description
             *
             * Deletes all earningHistories of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.earningHistories.destroyAll = function() {
          var TargetResource = $injector.get("EarningHistory");
          var action = TargetResource["::delete::QrCode::earningHistories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode.earningHistories#destroyById
             * @methodOf lbServices.QrCode.earningHistories
             *
             * @description
             *
             * Delete a related item by id for earningHistories.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for earningHistories
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.earningHistories.destroyById = function() {
          var TargetResource = $injector.get("EarningHistory");
          var action = TargetResource["::destroyById::QrCode::earningHistories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode.earningHistories#findById
             * @methodOf lbServices.QrCode.earningHistories
             *
             * @description
             *
             * Find a related item by id for earningHistories.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for earningHistories
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
        R.earningHistories.findById = function() {
          var TargetResource = $injector.get("EarningHistory");
          var action = TargetResource["::findById::QrCode::earningHistories"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCode.earningHistories#updateById
             * @methodOf lbServices.QrCode.earningHistories
             *
             * @description
             *
             * Update a related item by id for earningHistories.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for earningHistories
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
        R.earningHistories.updateById = function() {
          var TargetResource = $injector.get("EarningHistory");
          var action = TargetResource["::updateById::QrCode::earningHistories"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Department
 * @header lbServices.Department
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Department` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Department",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Departments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Department.employees.findById() instead.
            "prototype$__findById__employees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employees/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.employees.destroyById() instead.
            "prototype$__destroyById__employees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employees/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.employees.updateById() instead.
            "prototype$__updateById__employees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employees/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.products.findById() instead.
            "prototype$__findById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/products/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.products.destroyById() instead.
            "prototype$__destroyById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/products/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.products.updateById() instead.
            "prototype$__updateById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/products/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.retailerTransactions.findById() instead.
            "prototype$__findById__retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/retailerTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.retailerTransactions.destroyById() instead.
            "prototype$__destroyById__retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/retailerTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.retailerTransactions.updateById() instead.
            "prototype$__updateById__retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/retailerTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.qrCodeGroups.findById() instead.
            "prototype$__findById__qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/qrCodeGroups/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.qrCodeGroups.destroyById() instead.
            "prototype$__destroyById__qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/qrCodeGroups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.qrCodeGroups.updateById() instead.
            "prototype$__updateById__qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/qrCodeGroups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.employees() instead.
            "prototype$__get__employees": {
              isArray: true,
              url: urlBase + "/Departments/:id/employees",
              method: "GET",
            },

            // INTERNAL. Use Department.employees.create() instead.
            "prototype$__create__employees": {
              url: urlBase + "/Departments/:id/employees",
              method: "POST",
            },

            // INTERNAL. Use Department.employees.destroyAll() instead.
            "prototype$__delete__employees": {
              url: urlBase + "/Departments/:id/employees",
              method: "DELETE",
            },

            // INTERNAL. Use Department.employees.count() instead.
            "prototype$__count__employees": {
              url: urlBase + "/Departments/:id/employees/count",
              method: "GET",
            },

            // INTERNAL. Use Department.products() instead.
            "prototype$__get__products": {
              isArray: true,
              url: urlBase + "/Departments/:id/products",
              method: "GET",
            },

            // INTERNAL. Use Department.products.create() instead.
            "prototype$__create__products": {
              url: urlBase + "/Departments/:id/products",
              method: "POST",
            },

            // INTERNAL. Use Department.products.destroyAll() instead.
            "prototype$__delete__products": {
              url: urlBase + "/Departments/:id/products",
              method: "DELETE",
            },

            // INTERNAL. Use Department.products.count() instead.
            "prototype$__count__products": {
              url: urlBase + "/Departments/:id/products/count",
              method: "GET",
            },

            // INTERNAL. Use Department.retailerTransactions() instead.
            "prototype$__get__retailerTransactions": {
              isArray: true,
              url: urlBase + "/Departments/:id/retailerTransactions",
              method: "GET",
            },

            // INTERNAL. Use Department.retailerTransactions.create() instead.
            "prototype$__create__retailerTransactions": {
              url: urlBase + "/Departments/:id/retailerTransactions",
              method: "POST",
            },

            // INTERNAL. Use Department.retailerTransactions.destroyAll() instead.
            "prototype$__delete__retailerTransactions": {
              url: urlBase + "/Departments/:id/retailerTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use Department.retailerTransactions.count() instead.
            "prototype$__count__retailerTransactions": {
              url: urlBase + "/Departments/:id/retailerTransactions/count",
              method: "GET",
            },

            // INTERNAL. Use Department.qrCodeGroups() instead.
            "prototype$__get__qrCodeGroups": {
              isArray: true,
              url: urlBase + "/Departments/:id/qrCodeGroups",
              method: "GET",
            },

            // INTERNAL. Use Department.qrCodeGroups.create() instead.
            "prototype$__create__qrCodeGroups": {
              url: urlBase + "/Departments/:id/qrCodeGroups",
              method: "POST",
            },

            // INTERNAL. Use Department.qrCodeGroups.destroyAll() instead.
            "prototype$__delete__qrCodeGroups": {
              url: urlBase + "/Departments/:id/qrCodeGroups",
              method: "DELETE",
            },

            // INTERNAL. Use Department.qrCodeGroups.count() instead.
            "prototype$__count__qrCodeGroups": {
              url: urlBase + "/Departments/:id/qrCodeGroups/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#create
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Departments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#createMany
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Departments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#upsert
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Departments",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#exists
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Departments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#findById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Departments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#find
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Departments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#findOne
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Departments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#updateAll
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Departments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#deleteById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Departments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#count
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Departments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#prototype$updateAttributes
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Departments/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#createChangeStream
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Departments/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#getSchema
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Departments/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#getAbsoluteSchema
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Departments/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#save
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Departments/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#getDetailSchema
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Departments/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#getModelRelationSchema
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Departments/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#deptWiseRetailerDetail
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Get the department wise retailer detail
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Array of department data.
             */
            "deptWiseRetailerDetail": {
              isArray: true,
              url: urlBase + "/Departments/deptWiseRetailerDetail",
              method: "POST",
            },

            // INTERNAL. Use Employee.department() instead.
            "::get::Employee::department": {
              url: urlBase + "/Employees/:id/department",
              method: "GET",
            },

            // INTERNAL. Use Retailer.department.findById() instead.
            "::findById::Retailer::department": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/department/:fk",
              method: "GET",
            },

            // INTERNAL. Use Retailer.department.destroyById() instead.
            "::destroyById::Retailer::department": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/department/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.department.updateById() instead.
            "::updateById::Retailer::department": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/department/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Retailer.department() instead.
            "::get::Retailer::department": {
              isArray: true,
              url: urlBase + "/Retailers/:id/department",
              method: "GET",
            },

            // INTERNAL. Use Retailer.department.create() instead.
            "::create::Retailer::department": {
              url: urlBase + "/Retailers/:id/department",
              method: "POST",
            },

            // INTERNAL. Use Retailer.department.createMany() instead.
            "::createMany::Retailer::department": {
              isArray: true,
              url: urlBase + "/Retailers/:id/department",
              method: "POST",
            },

            // INTERNAL. Use Retailer.department.destroyAll() instead.
            "::delete::Retailer::department": {
              url: urlBase + "/Retailers/:id/department",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.department.count() instead.
            "::count::Retailer::department": {
              url: urlBase + "/Retailers/:id/department/count",
              method: "GET",
            },

            // INTERNAL. Use QrCode.department() instead.
            "::get::QrCode::department": {
              url: urlBase + "/QrCodes/:id/department",
              method: "GET",
            },

            // INTERNAL. Use Product.department() instead.
            "::get::Product::department": {
              url: urlBase + "/Products/:id/department",
              method: "GET",
            },

            // INTERNAL. Use RetailerTransaction.department() instead.
            "::get::RetailerTransaction::department": {
              url: urlBase + "/RetailerTransactions/:id/department",
              method: "GET",
            },

            // INTERNAL. Use QrCodeGroup.department() instead.
            "::get::QrCodeGroup::department": {
              url: urlBase + "/QrCodeGroups/:id/department",
              method: "GET",
            },

            // INTERNAL. Use EarningHistory.department() instead.
            "::get::EarningHistory::department": {
              url: urlBase + "/EarningHistories/:id/department",
              method: "GET",
            },

            // INTERNAL. Use DepartmentTransaction.department() instead.
            "::get::DepartmentTransaction::department": {
              url: urlBase + "/DepartmentTransactions/:id/department",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Department#updateOrCreate
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Department#update
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Department#destroyById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Department#removeById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Department#modelName
        * @propertyOf lbServices.Department
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Department`.
        */
        R.modelName = "Department";

    /**
     * @ngdoc object
     * @name lbServices.Department.employees
     * @header lbServices.Department.employees
     * @object
     * @description
     *
     * The object `Department.employees` groups methods
     * manipulating `Employee` instances related to `Department`.
     *
     * Call {@link lbServices.Department#employees Department.employees()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Department#employees
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Queries employees of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employees = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Department::employees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employees#count
             * @methodOf lbServices.Department.employees
             *
             * @description
             *
             * Counts employees of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.employees.count = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::count::Department::employees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employees#create
             * @methodOf lbServices.Department.employees
             *
             * @description
             *
             * Creates a new instance in employees of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employees.create = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::create::Department::employees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employees#createMany
             * @methodOf lbServices.Department.employees
             *
             * @description
             *
             * Creates a new instance in employees of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employees.createMany = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::createMany::Department::employees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employees#destroyAll
             * @methodOf lbServices.Department.employees
             *
             * @description
             *
             * Deletes all employees of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employees.destroyAll = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::delete::Department::employees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employees#destroyById
             * @methodOf lbServices.Department.employees
             *
             * @description
             *
             * Delete a related item by id for employees.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for employees
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employees.destroyById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::destroyById::Department::employees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employees#findById
             * @methodOf lbServices.Department.employees
             *
             * @description
             *
             * Find a related item by id for employees.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for employees
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employees.findById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::findById::Department::employees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employees#updateById
             * @methodOf lbServices.Department.employees
             *
             * @description
             *
             * Update a related item by id for employees.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for employees
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employees.updateById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::updateById::Department::employees"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Department.products
     * @header lbServices.Department.products
     * @object
     * @description
     *
     * The object `Department.products` groups methods
     * manipulating `Product` instances related to `Department`.
     *
     * Call {@link lbServices.Department#products Department.products()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Department#products
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Queries products of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::Department::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.products#count
             * @methodOf lbServices.Department.products
             *
             * @description
             *
             * Counts products of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.products.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::Department::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.products#create
             * @methodOf lbServices.Department.products
             *
             * @description
             *
             * Creates a new instance in products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::Department::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.products#createMany
             * @methodOf lbServices.Department.products
             *
             * @description
             *
             * Creates a new instance in products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::Department::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.products#destroyAll
             * @methodOf lbServices.Department.products
             *
             * @description
             *
             * Deletes all products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::Department::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.products#destroyById
             * @methodOf lbServices.Department.products
             *
             * @description
             *
             * Delete a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::Department::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.products#findById
             * @methodOf lbServices.Department.products
             *
             * @description
             *
             * Find a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::Department::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.products#updateById
             * @methodOf lbServices.Department.products
             *
             * @description
             *
             * Update a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::Department::products"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Department.retailerTransactions
     * @header lbServices.Department.retailerTransactions
     * @object
     * @description
     *
     * The object `Department.retailerTransactions` groups methods
     * manipulating `RetailerTransaction` instances related to `Department`.
     *
     * Call {@link lbServices.Department#retailerTransactions Department.retailerTransactions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Department#retailerTransactions
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Queries retailerTransactions of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::get::Department::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.retailerTransactions#count
             * @methodOf lbServices.Department.retailerTransactions
             *
             * @description
             *
             * Counts retailerTransactions of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.retailerTransactions.count = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::count::Department::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.retailerTransactions#create
             * @methodOf lbServices.Department.retailerTransactions
             *
             * @description
             *
             * Creates a new instance in retailerTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.create = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::create::Department::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.retailerTransactions#createMany
             * @methodOf lbServices.Department.retailerTransactions
             *
             * @description
             *
             * Creates a new instance in retailerTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.createMany = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::createMany::Department::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.retailerTransactions#destroyAll
             * @methodOf lbServices.Department.retailerTransactions
             *
             * @description
             *
             * Deletes all retailerTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.retailerTransactions.destroyAll = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::delete::Department::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.retailerTransactions#destroyById
             * @methodOf lbServices.Department.retailerTransactions
             *
             * @description
             *
             * Delete a related item by id for retailerTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailerTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.retailerTransactions.destroyById = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::destroyById::Department::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.retailerTransactions#findById
             * @methodOf lbServices.Department.retailerTransactions
             *
             * @description
             *
             * Find a related item by id for retailerTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailerTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.findById = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::findById::Department::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.retailerTransactions#updateById
             * @methodOf lbServices.Department.retailerTransactions
             *
             * @description
             *
             * Update a related item by id for retailerTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailerTransactions
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.updateById = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::updateById::Department::retailerTransactions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Department.qrCodeGroups
     * @header lbServices.Department.qrCodeGroups
     * @object
     * @description
     *
     * The object `Department.qrCodeGroups` groups methods
     * manipulating `QrCodeGroup` instances related to `Department`.
     *
     * Call {@link lbServices.Department#qrCodeGroups Department.qrCodeGroups()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Department#qrCodeGroups
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Queries qrCodeGroups of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroups = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::get::Department::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.qrCodeGroups#count
             * @methodOf lbServices.Department.qrCodeGroups
             *
             * @description
             *
             * Counts qrCodeGroups of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.qrCodeGroups.count = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::count::Department::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.qrCodeGroups#create
             * @methodOf lbServices.Department.qrCodeGroups
             *
             * @description
             *
             * Creates a new instance in qrCodeGroups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroups.create = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::create::Department::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.qrCodeGroups#createMany
             * @methodOf lbServices.Department.qrCodeGroups
             *
             * @description
             *
             * Creates a new instance in qrCodeGroups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroups.createMany = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::createMany::Department::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.qrCodeGroups#destroyAll
             * @methodOf lbServices.Department.qrCodeGroups
             *
             * @description
             *
             * Deletes all qrCodeGroups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodeGroups.destroyAll = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::delete::Department::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.qrCodeGroups#destroyById
             * @methodOf lbServices.Department.qrCodeGroups
             *
             * @description
             *
             * Delete a related item by id for qrCodeGroups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodeGroups
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodeGroups.destroyById = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::destroyById::Department::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.qrCodeGroups#findById
             * @methodOf lbServices.Department.qrCodeGroups
             *
             * @description
             *
             * Find a related item by id for qrCodeGroups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodeGroups
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroups.findById = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::findById::Department::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.qrCodeGroups#updateById
             * @methodOf lbServices.Department.qrCodeGroups
             *
             * @description
             *
             * Update a related item by id for qrCodeGroups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodeGroups
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroups.updateById = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::updateById::Department::qrCodeGroups"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Product
 * @header lbServices.Product
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Product` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Product",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Products/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Product.department() instead.
            "prototype$__get__department": {
              url: urlBase + "/Products/:id/department",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodes.findById() instead.
            "prototype$__findById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodes.destroyById() instead.
            "prototype$__destroyById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Product.qrCodes.updateById() instead.
            "prototype$__updateById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Product.category() instead.
            "prototype$__get__category": {
              url: urlBase + "/Products/:id/category",
              method: "GET",
            },

            // INTERNAL. Use Product.subCategory1() instead.
            "prototype$__get__subCategory1": {
              url: urlBase + "/Products/:id/subCategory1",
              method: "GET",
            },

            // INTERNAL. Use Product.subCategory2() instead.
            "prototype$__get__subCategory2": {
              url: urlBase + "/Products/:id/subCategory2",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodeGroups.findById() instead.
            "prototype$__findById__qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodeGroups/:fk",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodeGroups.destroyById() instead.
            "prototype$__destroyById__qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodeGroups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Product.qrCodeGroups.updateById() instead.
            "prototype$__updateById__qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodeGroups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Product.qrCodes() instead.
            "prototype$__get__qrCodes": {
              isArray: true,
              url: urlBase + "/Products/:id/qrCodes",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodes.create() instead.
            "prototype$__create__qrCodes": {
              url: urlBase + "/Products/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use Product.qrCodes.destroyAll() instead.
            "prototype$__delete__qrCodes": {
              url: urlBase + "/Products/:id/qrCodes",
              method: "DELETE",
            },

            // INTERNAL. Use Product.qrCodes.count() instead.
            "prototype$__count__qrCodes": {
              url: urlBase + "/Products/:id/qrCodes/count",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodeGroups() instead.
            "prototype$__get__qrCodeGroups": {
              isArray: true,
              url: urlBase + "/Products/:id/qrCodeGroups",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodeGroups.create() instead.
            "prototype$__create__qrCodeGroups": {
              url: urlBase + "/Products/:id/qrCodeGroups",
              method: "POST",
            },

            // INTERNAL. Use Product.qrCodeGroups.destroyAll() instead.
            "prototype$__delete__qrCodeGroups": {
              url: urlBase + "/Products/:id/qrCodeGroups",
              method: "DELETE",
            },

            // INTERNAL. Use Product.qrCodeGroups.count() instead.
            "prototype$__count__qrCodeGroups": {
              url: urlBase + "/Products/:id/qrCodeGroups/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#create
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Products",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#createMany
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Products",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#upsert
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Products",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#exists
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Products/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#findById
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Products/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#find
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Products",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#findOne
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Products/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#updateAll
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Products/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#deleteById
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Products/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#count
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Products/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#prototype$updateAttributes
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Products/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#createChangeStream
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Products/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#getSchema
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Products/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#getAbsoluteSchema
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Products/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#save
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Products/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#getDetailSchema
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Products/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Product#getModelRelationSchema
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Products/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use QrCode.product() instead.
            "::get::QrCode::product": {
              url: urlBase + "/QrCodes/:id/product",
              method: "GET",
            },

            // INTERNAL. Use Department.products.findById() instead.
            "::findById::Department::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/products/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.products.destroyById() instead.
            "::destroyById::Department::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/products/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.products.updateById() instead.
            "::updateById::Department::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/products/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.products() instead.
            "::get::Department::products": {
              isArray: true,
              url: urlBase + "/Departments/:id/products",
              method: "GET",
            },

            // INTERNAL. Use Department.products.create() instead.
            "::create::Department::products": {
              url: urlBase + "/Departments/:id/products",
              method: "POST",
            },

            // INTERNAL. Use Department.products.createMany() instead.
            "::createMany::Department::products": {
              isArray: true,
              url: urlBase + "/Departments/:id/products",
              method: "POST",
            },

            // INTERNAL. Use Department.products.destroyAll() instead.
            "::delete::Department::products": {
              url: urlBase + "/Departments/:id/products",
              method: "DELETE",
            },

            // INTERNAL. Use Department.products.count() instead.
            "::count::Department::products": {
              url: urlBase + "/Departments/:id/products/count",
              method: "GET",
            },

            // INTERNAL. Use Category.products.findById() instead.
            "::findById::Category::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/products/:fk",
              method: "GET",
            },

            // INTERNAL. Use Category.products.destroyById() instead.
            "::destroyById::Category::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/products/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Category.products.updateById() instead.
            "::updateById::Category::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/products/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Category.products() instead.
            "::get::Category::products": {
              isArray: true,
              url: urlBase + "/Categories/:id/products",
              method: "GET",
            },

            // INTERNAL. Use Category.products.create() instead.
            "::create::Category::products": {
              url: urlBase + "/Categories/:id/products",
              method: "POST",
            },

            // INTERNAL. Use Category.products.createMany() instead.
            "::createMany::Category::products": {
              isArray: true,
              url: urlBase + "/Categories/:id/products",
              method: "POST",
            },

            // INTERNAL. Use Category.products.destroyAll() instead.
            "::delete::Category::products": {
              url: urlBase + "/Categories/:id/products",
              method: "DELETE",
            },

            // INTERNAL. Use Category.products.count() instead.
            "::count::Category::products": {
              url: urlBase + "/Categories/:id/products/count",
              method: "GET",
            },

            // INTERNAL. Use SubCategory1.products.findById() instead.
            "::findById::SubCategory1::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory1s/:id/products/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubCategory1.products.destroyById() instead.
            "::destroyById::SubCategory1::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory1s/:id/products/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubCategory1.products.updateById() instead.
            "::updateById::SubCategory1::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory1s/:id/products/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubCategory1.products() instead.
            "::get::SubCategory1::products": {
              isArray: true,
              url: urlBase + "/SubCategory1s/:id/products",
              method: "GET",
            },

            // INTERNAL. Use SubCategory1.products.create() instead.
            "::create::SubCategory1::products": {
              url: urlBase + "/SubCategory1s/:id/products",
              method: "POST",
            },

            // INTERNAL. Use SubCategory1.products.createMany() instead.
            "::createMany::SubCategory1::products": {
              isArray: true,
              url: urlBase + "/SubCategory1s/:id/products",
              method: "POST",
            },

            // INTERNAL. Use SubCategory1.products.destroyAll() instead.
            "::delete::SubCategory1::products": {
              url: urlBase + "/SubCategory1s/:id/products",
              method: "DELETE",
            },

            // INTERNAL. Use SubCategory1.products.count() instead.
            "::count::SubCategory1::products": {
              url: urlBase + "/SubCategory1s/:id/products/count",
              method: "GET",
            },

            // INTERNAL. Use SubCategory2.products.findById() instead.
            "::findById::SubCategory2::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory2s/:id/products/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubCategory2.products.destroyById() instead.
            "::destroyById::SubCategory2::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory2s/:id/products/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubCategory2.products.updateById() instead.
            "::updateById::SubCategory2::products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory2s/:id/products/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubCategory2.products() instead.
            "::get::SubCategory2::products": {
              isArray: true,
              url: urlBase + "/SubCategory2s/:id/products",
              method: "GET",
            },

            // INTERNAL. Use SubCategory2.products.create() instead.
            "::create::SubCategory2::products": {
              url: urlBase + "/SubCategory2s/:id/products",
              method: "POST",
            },

            // INTERNAL. Use SubCategory2.products.createMany() instead.
            "::createMany::SubCategory2::products": {
              isArray: true,
              url: urlBase + "/SubCategory2s/:id/products",
              method: "POST",
            },

            // INTERNAL. Use SubCategory2.products.destroyAll() instead.
            "::delete::SubCategory2::products": {
              url: urlBase + "/SubCategory2s/:id/products",
              method: "DELETE",
            },

            // INTERNAL. Use SubCategory2.products.count() instead.
            "::count::SubCategory2::products": {
              url: urlBase + "/SubCategory2s/:id/products/count",
              method: "GET",
            },

            // INTERNAL. Use QrCodeGroup.product() instead.
            "::get::QrCodeGroup::product": {
              url: urlBase + "/QrCodeGroups/:id/product",
              method: "GET",
            },

            // INTERNAL. Use EarningHistory.product() instead.
            "::get::EarningHistory::product": {
              url: urlBase + "/EarningHistories/:id/product",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Product#updateOrCreate
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Product#update
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Product#destroyById
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Product#removeById
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Product#modelName
        * @propertyOf lbServices.Product
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Product`.
        */
        R.modelName = "Product";


            /**
             * @ngdoc method
             * @name lbServices.Product#department
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Fetches belongsTo relation department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::Product::department"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Product.qrCodes
     * @header lbServices.Product.qrCodes
     * @object
     * @description
     *
     * The object `Product.qrCodes` groups methods
     * manipulating `QrCode` instances related to `Product`.
     *
     * Call {@link lbServices.Product#qrCodes Product.qrCodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Product#qrCodes
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Queries qrCodes of Product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::get::Product::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodes#count
             * @methodOf lbServices.Product.qrCodes
             *
             * @description
             *
             * Counts qrCodes of Product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.qrCodes.count = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::count::Product::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodes#create
             * @methodOf lbServices.Product.qrCodes
             *
             * @description
             *
             * Creates a new instance in qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.create = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::create::Product::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodes#createMany
             * @methodOf lbServices.Product.qrCodes
             *
             * @description
             *
             * Creates a new instance in qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.createMany = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::createMany::Product::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodes#destroyAll
             * @methodOf lbServices.Product.qrCodes
             *
             * @description
             *
             * Deletes all qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodes.destroyAll = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::delete::Product::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodes#destroyById
             * @methodOf lbServices.Product.qrCodes
             *
             * @description
             *
             * Delete a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodes.destroyById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::destroyById::Product::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodes#findById
             * @methodOf lbServices.Product.qrCodes
             *
             * @description
             *
             * Find a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.findById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::findById::Product::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodes#updateById
             * @methodOf lbServices.Product.qrCodes
             *
             * @description
             *
             * Update a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.updateById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::updateById::Product::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product#category
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Fetches belongsTo relation category.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R.category = function() {
          var TargetResource = $injector.get("Category");
          var action = TargetResource["::get::Product::category"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product#subCategory1
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Fetches belongsTo relation subCategory1.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
        R.subCategory1 = function() {
          var TargetResource = $injector.get("SubCategory1");
          var action = TargetResource["::get::Product::subCategory1"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product#subCategory2
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Fetches belongsTo relation subCategory2.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
        R.subCategory2 = function() {
          var TargetResource = $injector.get("SubCategory2");
          var action = TargetResource["::get::Product::subCategory2"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Product.qrCodeGroups
     * @header lbServices.Product.qrCodeGroups
     * @object
     * @description
     *
     * The object `Product.qrCodeGroups` groups methods
     * manipulating `QrCodeGroup` instances related to `Product`.
     *
     * Call {@link lbServices.Product#qrCodeGroups Product.qrCodeGroups()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Product#qrCodeGroups
             * @methodOf lbServices.Product
             *
             * @description
             *
             * Queries qrCodeGroups of Product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroups = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::get::Product::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodeGroups#count
             * @methodOf lbServices.Product.qrCodeGroups
             *
             * @description
             *
             * Counts qrCodeGroups of Product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.qrCodeGroups.count = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::count::Product::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodeGroups#create
             * @methodOf lbServices.Product.qrCodeGroups
             *
             * @description
             *
             * Creates a new instance in qrCodeGroups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroups.create = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::create::Product::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodeGroups#createMany
             * @methodOf lbServices.Product.qrCodeGroups
             *
             * @description
             *
             * Creates a new instance in qrCodeGroups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroups.createMany = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::createMany::Product::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodeGroups#destroyAll
             * @methodOf lbServices.Product.qrCodeGroups
             *
             * @description
             *
             * Deletes all qrCodeGroups of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodeGroups.destroyAll = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::delete::Product::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodeGroups#destroyById
             * @methodOf lbServices.Product.qrCodeGroups
             *
             * @description
             *
             * Delete a related item by id for qrCodeGroups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodeGroups
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodeGroups.destroyById = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::destroyById::Product::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodeGroups#findById
             * @methodOf lbServices.Product.qrCodeGroups
             *
             * @description
             *
             * Find a related item by id for qrCodeGroups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodeGroups
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroups.findById = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::findById::Product::qrCodeGroups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Product.qrCodeGroups#updateById
             * @methodOf lbServices.Product.qrCodeGroups
             *
             * @description
             *
             * Update a related item by id for qrCodeGroups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodeGroups
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R.qrCodeGroups.updateById = function() {
          var TargetResource = $injector.get("QrCodeGroup");
          var action = TargetResource["::updateById::Product::qrCodeGroups"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Category
 * @header lbServices.Category
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Category` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Category",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Categories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Category.products.findById() instead.
            "prototype$__findById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/products/:fk",
              method: "GET",
            },

            // INTERNAL. Use Category.products.destroyById() instead.
            "prototype$__destroyById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/products/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Category.products.updateById() instead.
            "prototype$__updateById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Categories/:id/products/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Category.products() instead.
            "prototype$__get__products": {
              isArray: true,
              url: urlBase + "/Categories/:id/products",
              method: "GET",
            },

            // INTERNAL. Use Category.products.create() instead.
            "prototype$__create__products": {
              url: urlBase + "/Categories/:id/products",
              method: "POST",
            },

            // INTERNAL. Use Category.products.destroyAll() instead.
            "prototype$__delete__products": {
              url: urlBase + "/Categories/:id/products",
              method: "DELETE",
            },

            // INTERNAL. Use Category.products.count() instead.
            "prototype$__count__products": {
              url: urlBase + "/Categories/:id/products/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#create
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Categories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#createMany
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Categories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#upsert
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Categories",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#exists
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Categories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#findById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Categories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#find
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Categories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#findOne
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Categories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#updateAll
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Categories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#deleteById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Categories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#count
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Categories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#prototype$updateAttributes
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Categories/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#createChangeStream
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Categories/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#getSchema
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Categories/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#getAbsoluteSchema
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Categories/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#save
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Categories/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#getDetailSchema
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Categories/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Category#getModelRelationSchema
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Categories/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use Product.category() instead.
            "::get::Product::category": {
              url: urlBase + "/Products/:id/category",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Category#updateOrCreate
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Category#update
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Category#destroyById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Category#removeById
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Category` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Category#modelName
        * @propertyOf lbServices.Category
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Category`.
        */
        R.modelName = "Category";

    /**
     * @ngdoc object
     * @name lbServices.Category.products
     * @header lbServices.Category.products
     * @object
     * @description
     *
     * The object `Category.products` groups methods
     * manipulating `Product` instances related to `Category`.
     *
     * Call {@link lbServices.Category#products Category.products()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Category#products
             * @methodOf lbServices.Category
             *
             * @description
             *
             * Queries products of Category.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::Category::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.products#count
             * @methodOf lbServices.Category.products
             *
             * @description
             *
             * Counts products of Category.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.products.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::Category::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.products#create
             * @methodOf lbServices.Category.products
             *
             * @description
             *
             * Creates a new instance in products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::Category::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.products#createMany
             * @methodOf lbServices.Category.products
             *
             * @description
             *
             * Creates a new instance in products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::Category::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.products#destroyAll
             * @methodOf lbServices.Category.products
             *
             * @description
             *
             * Deletes all products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::Category::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.products#destroyById
             * @methodOf lbServices.Category.products
             *
             * @description
             *
             * Delete a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::Category::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.products#findById
             * @methodOf lbServices.Category.products
             *
             * @description
             *
             * Find a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::Category::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Category.products#updateById
             * @methodOf lbServices.Category.products
             *
             * @description
             *
             * Update a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::Category::products"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SubCategory1
 * @header lbServices.SubCategory1
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SubCategory1` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SubCategory1",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/SubCategory1s/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SubCategory1.products.findById() instead.
            "prototype$__findById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory1s/:id/products/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubCategory1.products.destroyById() instead.
            "prototype$__destroyById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory1s/:id/products/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubCategory1.products.updateById() instead.
            "prototype$__updateById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory1s/:id/products/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubCategory1.products() instead.
            "prototype$__get__products": {
              isArray: true,
              url: urlBase + "/SubCategory1s/:id/products",
              method: "GET",
            },

            // INTERNAL. Use SubCategory1.products.create() instead.
            "prototype$__create__products": {
              url: urlBase + "/SubCategory1s/:id/products",
              method: "POST",
            },

            // INTERNAL. Use SubCategory1.products.destroyAll() instead.
            "prototype$__delete__products": {
              url: urlBase + "/SubCategory1s/:id/products",
              method: "DELETE",
            },

            // INTERNAL. Use SubCategory1.products.count() instead.
            "prototype$__count__products": {
              url: urlBase + "/SubCategory1s/:id/products/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#create
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SubCategory1s",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#createMany
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SubCategory1s",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#upsert
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SubCategory1s",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#exists
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SubCategory1s/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#findById
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SubCategory1s/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#find
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SubCategory1s",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#findOne
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SubCategory1s/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#updateAll
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SubCategory1s/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#deleteById
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SubCategory1s/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#count
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SubCategory1s/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#prototype$updateAttributes
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SubCategory1s/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#createChangeStream
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SubCategory1s/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#getSchema
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/SubCategory1s/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#getAbsoluteSchema
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/SubCategory1s/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#save
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/SubCategory1s/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#getDetailSchema
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/SubCategory1s/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#getModelRelationSchema
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/SubCategory1s/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use Product.subCategory1() instead.
            "::get::Product::subCategory1": {
              url: urlBase + "/Products/:id/subCategory1",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#updateOrCreate
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#update
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#destroyById
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#removeById
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory1` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SubCategory1#modelName
        * @propertyOf lbServices.SubCategory1
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SubCategory1`.
        */
        R.modelName = "SubCategory1";

    /**
     * @ngdoc object
     * @name lbServices.SubCategory1.products
     * @header lbServices.SubCategory1.products
     * @object
     * @description
     *
     * The object `SubCategory1.products` groups methods
     * manipulating `Product` instances related to `SubCategory1`.
     *
     * Call {@link lbServices.SubCategory1#products SubCategory1.products()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SubCategory1#products
             * @methodOf lbServices.SubCategory1
             *
             * @description
             *
             * Queries products of SubCategory1.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::SubCategory1::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1.products#count
             * @methodOf lbServices.SubCategory1.products
             *
             * @description
             *
             * Counts products of SubCategory1.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.products.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::SubCategory1::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1.products#create
             * @methodOf lbServices.SubCategory1.products
             *
             * @description
             *
             * Creates a new instance in products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::SubCategory1::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1.products#createMany
             * @methodOf lbServices.SubCategory1.products
             *
             * @description
             *
             * Creates a new instance in products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::SubCategory1::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1.products#destroyAll
             * @methodOf lbServices.SubCategory1.products
             *
             * @description
             *
             * Deletes all products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::SubCategory1::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1.products#destroyById
             * @methodOf lbServices.SubCategory1.products
             *
             * @description
             *
             * Delete a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::SubCategory1::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1.products#findById
             * @methodOf lbServices.SubCategory1.products
             *
             * @description
             *
             * Find a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::SubCategory1::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory1.products#updateById
             * @methodOf lbServices.SubCategory1.products
             *
             * @description
             *
             * Update a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::SubCategory1::products"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SubCategory2
 * @header lbServices.SubCategory2
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SubCategory2` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SubCategory2",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/SubCategory2s/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SubCategory2.products.findById() instead.
            "prototype$__findById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory2s/:id/products/:fk",
              method: "GET",
            },

            // INTERNAL. Use SubCategory2.products.destroyById() instead.
            "prototype$__destroyById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory2s/:id/products/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SubCategory2.products.updateById() instead.
            "prototype$__updateById__products": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SubCategory2s/:id/products/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SubCategory2.products() instead.
            "prototype$__get__products": {
              isArray: true,
              url: urlBase + "/SubCategory2s/:id/products",
              method: "GET",
            },

            // INTERNAL. Use SubCategory2.products.create() instead.
            "prototype$__create__products": {
              url: urlBase + "/SubCategory2s/:id/products",
              method: "POST",
            },

            // INTERNAL. Use SubCategory2.products.destroyAll() instead.
            "prototype$__delete__products": {
              url: urlBase + "/SubCategory2s/:id/products",
              method: "DELETE",
            },

            // INTERNAL. Use SubCategory2.products.count() instead.
            "prototype$__count__products": {
              url: urlBase + "/SubCategory2s/:id/products/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#create
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SubCategory2s",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#createMany
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SubCategory2s",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#upsert
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SubCategory2s",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#exists
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SubCategory2s/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#findById
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SubCategory2s/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#find
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SubCategory2s",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#findOne
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SubCategory2s/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#updateAll
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SubCategory2s/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#deleteById
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SubCategory2s/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#count
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SubCategory2s/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#prototype$updateAttributes
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SubCategory2s/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#createChangeStream
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SubCategory2s/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#getSchema
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/SubCategory2s/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#getAbsoluteSchema
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/SubCategory2s/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#save
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/SubCategory2s/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#getDetailSchema
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/SubCategory2s/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#getModelRelationSchema
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/SubCategory2s/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use Product.subCategory2() instead.
            "::get::Product::subCategory2": {
              url: urlBase + "/Products/:id/subCategory2",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#updateOrCreate
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#update
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#destroyById
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#removeById
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SubCategory2` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SubCategory2#modelName
        * @propertyOf lbServices.SubCategory2
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SubCategory2`.
        */
        R.modelName = "SubCategory2";

    /**
     * @ngdoc object
     * @name lbServices.SubCategory2.products
     * @header lbServices.SubCategory2.products
     * @object
     * @description
     *
     * The object `SubCategory2.products` groups methods
     * manipulating `Product` instances related to `SubCategory2`.
     *
     * Call {@link lbServices.SubCategory2#products SubCategory2.products()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SubCategory2#products
             * @methodOf lbServices.SubCategory2
             *
             * @description
             *
             * Queries products of SubCategory2.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::SubCategory2::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2.products#count
             * @methodOf lbServices.SubCategory2.products
             *
             * @description
             *
             * Counts products of SubCategory2.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.products.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::SubCategory2::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2.products#create
             * @methodOf lbServices.SubCategory2.products
             *
             * @description
             *
             * Creates a new instance in products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::SubCategory2::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2.products#createMany
             * @methodOf lbServices.SubCategory2.products
             *
             * @description
             *
             * Creates a new instance in products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::SubCategory2::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2.products#destroyAll
             * @methodOf lbServices.SubCategory2.products
             *
             * @description
             *
             * Deletes all products of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::SubCategory2::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2.products#destroyById
             * @methodOf lbServices.SubCategory2.products
             *
             * @description
             *
             * Delete a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.products.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::SubCategory2::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2.products#findById
             * @methodOf lbServices.SubCategory2.products
             *
             * @description
             *
             * Find a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::SubCategory2::products"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SubCategory2.products#updateById
             * @methodOf lbServices.SubCategory2.products
             *
             * @description
             *
             * Update a related item by id for products.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for products
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.products.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::SubCategory2::products"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.State
 * @header lbServices.State
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `State` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "State",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/States/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use State.retailers.findById() instead.
            "prototype$__findById__retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/retailers/:fk",
              method: "GET",
            },

            // INTERNAL. Use State.retailers.destroyById() instead.
            "prototype$__destroyById__retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/retailers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use State.retailers.updateById() instead.
            "prototype$__updateById__retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/States/:id/retailers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use State.retailers() instead.
            "prototype$__get__retailers": {
              isArray: true,
              url: urlBase + "/States/:id/retailers",
              method: "GET",
            },

            // INTERNAL. Use State.retailers.create() instead.
            "prototype$__create__retailers": {
              url: urlBase + "/States/:id/retailers",
              method: "POST",
            },

            // INTERNAL. Use State.retailers.destroyAll() instead.
            "prototype$__delete__retailers": {
              url: urlBase + "/States/:id/retailers",
              method: "DELETE",
            },

            // INTERNAL. Use State.retailers.count() instead.
            "prototype$__count__retailers": {
              url: urlBase + "/States/:id/retailers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#create
             * @methodOf lbServices.State
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/States",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#createMany
             * @methodOf lbServices.State
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/States",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#upsert
             * @methodOf lbServices.State
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/States",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#exists
             * @methodOf lbServices.State
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/States/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#findById
             * @methodOf lbServices.State
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/States/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#find
             * @methodOf lbServices.State
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/States",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#findOne
             * @methodOf lbServices.State
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/States/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#updateAll
             * @methodOf lbServices.State
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/States/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#deleteById
             * @methodOf lbServices.State
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/States/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#count
             * @methodOf lbServices.State
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/States/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#prototype$updateAttributes
             * @methodOf lbServices.State
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/States/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#createChangeStream
             * @methodOf lbServices.State
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/States/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#getSchema
             * @methodOf lbServices.State
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/States/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#getAbsoluteSchema
             * @methodOf lbServices.State
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/States/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#save
             * @methodOf lbServices.State
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/States/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#getDetailSchema
             * @methodOf lbServices.State
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/States/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.State#getModelRelationSchema
             * @methodOf lbServices.State
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/States/getModelRelationSchema",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.State#updateOrCreate
             * @methodOf lbServices.State
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.State#update
             * @methodOf lbServices.State
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.State#destroyById
             * @methodOf lbServices.State
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.State#removeById
             * @methodOf lbServices.State
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `State` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.State#modelName
        * @propertyOf lbServices.State
        * @description
        * The name of the model represented by this $resource,
        * i.e. `State`.
        */
        R.modelName = "State";

    /**
     * @ngdoc object
     * @name lbServices.State.retailers
     * @header lbServices.State.retailers
     * @object
     * @description
     *
     * The object `State.retailers` groups methods
     * manipulating `Retailer` instances related to `State`.
     *
     * Call {@link lbServices.State#retailers State.retailers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.State#retailers
             * @methodOf lbServices.State
             *
             * @description
             *
             * Queries retailers of State.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailers = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::get::State::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.retailers#count
             * @methodOf lbServices.State.retailers
             *
             * @description
             *
             * Counts retailers of State.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.retailers.count = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::count::State::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.retailers#create
             * @methodOf lbServices.State.retailers
             *
             * @description
             *
             * Creates a new instance in retailers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailers.create = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::create::State::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.retailers#createMany
             * @methodOf lbServices.State.retailers
             *
             * @description
             *
             * Creates a new instance in retailers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailers.createMany = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::createMany::State::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.retailers#destroyAll
             * @methodOf lbServices.State.retailers
             *
             * @description
             *
             * Deletes all retailers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.retailers.destroyAll = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::delete::State::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.retailers#destroyById
             * @methodOf lbServices.State.retailers
             *
             * @description
             *
             * Delete a related item by id for retailers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.retailers.destroyById = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::destroyById::State::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.retailers#findById
             * @methodOf lbServices.State.retailers
             *
             * @description
             *
             * Find a related item by id for retailers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailers.findById = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::findById::State::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.State.retailers#updateById
             * @methodOf lbServices.State.retailers
             *
             * @description
             *
             * Update a related item by id for retailers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailers.updateById = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::updateById::State::retailers"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.City
 * @header lbServices.City
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `City` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "City",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Cities/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use City.retailers.findById() instead.
            "prototype$__findById__retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/retailers/:fk",
              method: "GET",
            },

            // INTERNAL. Use City.retailers.destroyById() instead.
            "prototype$__destroyById__retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/retailers/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use City.retailers.updateById() instead.
            "prototype$__updateById__retailers": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Cities/:id/retailers/:fk",
              method: "PUT",
            },

            // INTERNAL. Use City.retailers() instead.
            "prototype$__get__retailers": {
              isArray: true,
              url: urlBase + "/Cities/:id/retailers",
              method: "GET",
            },

            // INTERNAL. Use City.retailers.create() instead.
            "prototype$__create__retailers": {
              url: urlBase + "/Cities/:id/retailers",
              method: "POST",
            },

            // INTERNAL. Use City.retailers.destroyAll() instead.
            "prototype$__delete__retailers": {
              url: urlBase + "/Cities/:id/retailers",
              method: "DELETE",
            },

            // INTERNAL. Use City.retailers.count() instead.
            "prototype$__count__retailers": {
              url: urlBase + "/Cities/:id/retailers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#create
             * @methodOf lbServices.City
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Cities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#createMany
             * @methodOf lbServices.City
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Cities",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#upsert
             * @methodOf lbServices.City
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Cities",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#exists
             * @methodOf lbServices.City
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Cities/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#findById
             * @methodOf lbServices.City
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Cities/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#find
             * @methodOf lbServices.City
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Cities",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#findOne
             * @methodOf lbServices.City
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Cities/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#updateAll
             * @methodOf lbServices.City
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Cities/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#deleteById
             * @methodOf lbServices.City
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Cities/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#count
             * @methodOf lbServices.City
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Cities/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#prototype$updateAttributes
             * @methodOf lbServices.City
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Cities/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#createChangeStream
             * @methodOf lbServices.City
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Cities/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#getSchema
             * @methodOf lbServices.City
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Cities/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#getAbsoluteSchema
             * @methodOf lbServices.City
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Cities/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#save
             * @methodOf lbServices.City
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Cities/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#getDetailSchema
             * @methodOf lbServices.City
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Cities/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.City#getModelRelationSchema
             * @methodOf lbServices.City
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Cities/getModelRelationSchema",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.City#updateOrCreate
             * @methodOf lbServices.City
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.City#update
             * @methodOf lbServices.City
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.City#destroyById
             * @methodOf lbServices.City
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.City#removeById
             * @methodOf lbServices.City
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `City` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.City#modelName
        * @propertyOf lbServices.City
        * @description
        * The name of the model represented by this $resource,
        * i.e. `City`.
        */
        R.modelName = "City";

    /**
     * @ngdoc object
     * @name lbServices.City.retailers
     * @header lbServices.City.retailers
     * @object
     * @description
     *
     * The object `City.retailers` groups methods
     * manipulating `Retailer` instances related to `City`.
     *
     * Call {@link lbServices.City#retailers City.retailers()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.City#retailers
             * @methodOf lbServices.City
             *
             * @description
             *
             * Queries retailers of City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailers = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::get::City::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.City.retailers#count
             * @methodOf lbServices.City.retailers
             *
             * @description
             *
             * Counts retailers of City.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.retailers.count = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::count::City::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.City.retailers#create
             * @methodOf lbServices.City.retailers
             *
             * @description
             *
             * Creates a new instance in retailers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailers.create = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::create::City::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.City.retailers#createMany
             * @methodOf lbServices.City.retailers
             *
             * @description
             *
             * Creates a new instance in retailers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailers.createMany = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::createMany::City::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.City.retailers#destroyAll
             * @methodOf lbServices.City.retailers
             *
             * @description
             *
             * Deletes all retailers of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.retailers.destroyAll = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::delete::City::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.City.retailers#destroyById
             * @methodOf lbServices.City.retailers
             *
             * @description
             *
             * Delete a related item by id for retailers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.retailers.destroyById = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::destroyById::City::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.City.retailers#findById
             * @methodOf lbServices.City.retailers
             *
             * @description
             *
             * Find a related item by id for retailers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailers
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailers.findById = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::findById::City::retailers"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.City.retailers#updateById
             * @methodOf lbServices.City.retailers
             *
             * @description
             *
             * Update a related item by id for retailers.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailers
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailers.updateById = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::updateById::City::retailers"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RetailerTransaction
 * @header lbServices.RetailerTransaction
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RetailerTransaction` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RetailerTransaction",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/RetailerTransactions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RetailerTransaction.retailer() instead.
            "prototype$__get__retailer": {
              url: urlBase + "/RetailerTransactions/:id/retailer",
              method: "GET",
            },

            // INTERNAL. Use RetailerTransaction.department() instead.
            "prototype$__get__department": {
              url: urlBase + "/RetailerTransactions/:id/department",
              method: "GET",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.findById() instead.
            "prototype$__findById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RetailerTransactions/:id/qrCodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.destroyById() instead.
            "prototype$__destroyById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RetailerTransactions/:id/qrCodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.updateById() instead.
            "prototype$__updateById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/RetailerTransactions/:id/qrCodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use RetailerTransaction.departmentTransaction() instead.
            "prototype$__get__departmentTransaction": {
              url: urlBase + "/RetailerTransactions/:id/departmentTransaction",
              method: "GET",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes() instead.
            "prototype$__get__qrCodes": {
              isArray: true,
              url: urlBase + "/RetailerTransactions/:id/qrCodes",
              method: "GET",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.create() instead.
            "prototype$__create__qrCodes": {
              url: urlBase + "/RetailerTransactions/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.destroyAll() instead.
            "prototype$__delete__qrCodes": {
              url: urlBase + "/RetailerTransactions/:id/qrCodes",
              method: "DELETE",
            },

            // INTERNAL. Use RetailerTransaction.qrCodes.count() instead.
            "prototype$__count__qrCodes": {
              url: urlBase + "/RetailerTransactions/:id/qrCodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#create
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RetailerTransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#createMany
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RetailerTransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#upsert
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RetailerTransactions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#exists
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RetailerTransactions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#findById
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RetailerTransactions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#find
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RetailerTransactions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#findOne
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RetailerTransactions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#updateAll
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RetailerTransactions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#deleteById
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RetailerTransactions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#count
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RetailerTransactions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#prototype$updateAttributes
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RetailerTransactions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#createChangeStream
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RetailerTransactions/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#getSchema
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/RetailerTransactions/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#getAbsoluteSchema
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/RetailerTransactions/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#save
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/RetailerTransactions/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#getDetailSchema
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/RetailerTransactions/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#getModelRelationSchema
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/RetailerTransactions/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#getRetailerRedeemHistory
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Get the Redeem history data
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             *  - `departmentId` – `{string=}` -
             *
             *  - `status` – `{string=}` - on_hold||success||failure
             *
             *  - `cursor` – `{string=}` - date property holding the last position detail
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Get list of transaction for retailers data
             */
            "getRetailerRedeemHistory": {
              url: urlBase + "/RetailerTransactions/getRetailerRedeemHistory",
              method: "POST",
            },

            // INTERNAL. Use Retailer.retailerTransactions.findById() instead.
            "::findById::Retailer::retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/retailerTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use Retailer.retailerTransactions.destroyById() instead.
            "::destroyById::Retailer::retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/retailerTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.retailerTransactions.updateById() instead.
            "::updateById::Retailer::retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/retailerTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Retailer.retailerTransactions() instead.
            "::get::Retailer::retailerTransactions": {
              isArray: true,
              url: urlBase + "/Retailers/:id/retailerTransactions",
              method: "GET",
            },

            // INTERNAL. Use Retailer.retailerTransactions.create() instead.
            "::create::Retailer::retailerTransactions": {
              url: urlBase + "/Retailers/:id/retailerTransactions",
              method: "POST",
            },

            // INTERNAL. Use Retailer.retailerTransactions.createMany() instead.
            "::createMany::Retailer::retailerTransactions": {
              isArray: true,
              url: urlBase + "/Retailers/:id/retailerTransactions",
              method: "POST",
            },

            // INTERNAL. Use Retailer.retailerTransactions.destroyAll() instead.
            "::delete::Retailer::retailerTransactions": {
              url: urlBase + "/Retailers/:id/retailerTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.retailerTransactions.count() instead.
            "::count::Retailer::retailerTransactions": {
              url: urlBase + "/Retailers/:id/retailerTransactions/count",
              method: "GET",
            },

            // INTERNAL. Use QrCode.retailerTransaction() instead.
            "::get::QrCode::retailerTransaction": {
              url: urlBase + "/QrCodes/:id/retailerTransaction",
              method: "GET",
            },

            // INTERNAL. Use Department.retailerTransactions.findById() instead.
            "::findById::Department::retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/retailerTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.retailerTransactions.destroyById() instead.
            "::destroyById::Department::retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/retailerTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.retailerTransactions.updateById() instead.
            "::updateById::Department::retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/retailerTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.retailerTransactions() instead.
            "::get::Department::retailerTransactions": {
              isArray: true,
              url: urlBase + "/Departments/:id/retailerTransactions",
              method: "GET",
            },

            // INTERNAL. Use Department.retailerTransactions.create() instead.
            "::create::Department::retailerTransactions": {
              url: urlBase + "/Departments/:id/retailerTransactions",
              method: "POST",
            },

            // INTERNAL. Use Department.retailerTransactions.createMany() instead.
            "::createMany::Department::retailerTransactions": {
              isArray: true,
              url: urlBase + "/Departments/:id/retailerTransactions",
              method: "POST",
            },

            // INTERNAL. Use Department.retailerTransactions.destroyAll() instead.
            "::delete::Department::retailerTransactions": {
              url: urlBase + "/Departments/:id/retailerTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use Department.retailerTransactions.count() instead.
            "::count::Department::retailerTransactions": {
              url: urlBase + "/Departments/:id/retailerTransactions/count",
              method: "GET",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.findById() instead.
            "::findById::DepartmentTransaction::retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.destroyById() instead.
            "::destroyById::DepartmentTransaction::retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.updateById() instead.
            "::updateById::DepartmentTransaction::retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions() instead.
            "::get::DepartmentTransaction::retailerTransactions": {
              isArray: true,
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions",
              method: "GET",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.create() instead.
            "::create::DepartmentTransaction::retailerTransactions": {
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions",
              method: "POST",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.createMany() instead.
            "::createMany::DepartmentTransaction::retailerTransactions": {
              isArray: true,
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions",
              method: "POST",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.destroyAll() instead.
            "::delete::DepartmentTransaction::retailerTransactions": {
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.count() instead.
            "::count::DepartmentTransaction::retailerTransactions": {
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#updateOrCreate
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#update
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#destroyById
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#removeById
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.RetailerTransaction#modelName
        * @propertyOf lbServices.RetailerTransaction
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RetailerTransaction`.
        */
        R.modelName = "RetailerTransaction";


            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#retailer
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Fetches belongsTo relation retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailer = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::get::RetailerTransaction::retailer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#department
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Fetches belongsTo relation department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::RetailerTransaction::department"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.RetailerTransaction.qrCodes
     * @header lbServices.RetailerTransaction.qrCodes
     * @object
     * @description
     *
     * The object `RetailerTransaction.qrCodes` groups methods
     * manipulating `QrCode` instances related to `RetailerTransaction`.
     *
     * Call {@link lbServices.RetailerTransaction#qrCodes RetailerTransaction.qrCodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#qrCodes
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Queries qrCodes of RetailerTransaction.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::get::RetailerTransaction::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction.qrCodes#count
             * @methodOf lbServices.RetailerTransaction.qrCodes
             *
             * @description
             *
             * Counts qrCodes of RetailerTransaction.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.qrCodes.count = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::count::RetailerTransaction::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction.qrCodes#create
             * @methodOf lbServices.RetailerTransaction.qrCodes
             *
             * @description
             *
             * Creates a new instance in qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.create = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::create::RetailerTransaction::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction.qrCodes#createMany
             * @methodOf lbServices.RetailerTransaction.qrCodes
             *
             * @description
             *
             * Creates a new instance in qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.createMany = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::createMany::RetailerTransaction::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction.qrCodes#destroyAll
             * @methodOf lbServices.RetailerTransaction.qrCodes
             *
             * @description
             *
             * Deletes all qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodes.destroyAll = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::delete::RetailerTransaction::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction.qrCodes#destroyById
             * @methodOf lbServices.RetailerTransaction.qrCodes
             *
             * @description
             *
             * Delete a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodes.destroyById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::destroyById::RetailerTransaction::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction.qrCodes#findById
             * @methodOf lbServices.RetailerTransaction.qrCodes
             *
             * @description
             *
             * Find a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.findById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::findById::RetailerTransaction::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction.qrCodes#updateById
             * @methodOf lbServices.RetailerTransaction.qrCodes
             *
             * @description
             *
             * Update a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.updateById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::updateById::RetailerTransaction::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.RetailerTransaction#departmentTransaction
             * @methodOf lbServices.RetailerTransaction
             *
             * @description
             *
             * Fetches belongsTo relation departmentTransaction.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
        R.departmentTransaction = function() {
          var TargetResource = $injector.get("DepartmentTransaction");
          var action = TargetResource["::get::RetailerTransaction::departmentTransaction"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Counter
 * @header lbServices.Counter
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Counter` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Counter",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Counters/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Counter#create
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Counters",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#createMany
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Counters",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#upsert
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Counters",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#exists
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Counters/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#findById
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Counters/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#find
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Counters",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#findOne
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Counters/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#updateAll
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Counters/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#deleteById
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Counters/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#count
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Counters/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#prototype$updateAttributes
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Counters/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#createChangeStream
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Counters/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#getSchema
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Counters/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#getAbsoluteSchema
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Counters/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#save
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Counters/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#getDetailSchema
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Counters/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Counter#getModelRelationSchema
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Counters/getModelRelationSchema",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Counter#updateOrCreate
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Counter#update
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Counter#destroyById
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Counter#removeById
             * @methodOf lbServices.Counter
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Counter` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Counter#modelName
        * @propertyOf lbServices.Counter
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Counter`.
        */
        R.modelName = "Counter";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.QrCodeGroup
 * @header lbServices.QrCodeGroup
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `QrCodeGroup` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "QrCodeGroup",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/QrCodeGroups/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use QrCodeGroup.department() instead.
            "prototype$__get__department": {
              url: urlBase + "/QrCodeGroups/:id/department",
              method: "GET",
            },

            // INTERNAL. Use QrCodeGroup.product() instead.
            "prototype$__get__product": {
              url: urlBase + "/QrCodeGroups/:id/product",
              method: "GET",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.findById() instead.
            "prototype$__findById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodeGroups/:id/qrCodes/:fk",
              method: "GET",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.destroyById() instead.
            "prototype$__destroyById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodeGroups/:id/qrCodes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.updateById() instead.
            "prototype$__updateById__qrCodes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodeGroups/:id/qrCodes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes() instead.
            "prototype$__get__qrCodes": {
              isArray: true,
              url: urlBase + "/QrCodeGroups/:id/qrCodes",
              method: "GET",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.create() instead.
            "prototype$__create__qrCodes": {
              url: urlBase + "/QrCodeGroups/:id/qrCodes",
              method: "POST",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.destroyAll() instead.
            "prototype$__delete__qrCodes": {
              url: urlBase + "/QrCodeGroups/:id/qrCodes",
              method: "DELETE",
            },

            // INTERNAL. Use QrCodeGroup.qrCodes.count() instead.
            "prototype$__count__qrCodes": {
              url: urlBase + "/QrCodeGroups/:id/qrCodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#create
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/QrCodeGroups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#createMany
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/QrCodeGroups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#upsert
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/QrCodeGroups",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#exists
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/QrCodeGroups/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#findById
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/QrCodeGroups/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#find
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/QrCodeGroups",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#findOne
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/QrCodeGroups/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#updateAll
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/QrCodeGroups/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#deleteById
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/QrCodeGroups/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#count
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/QrCodeGroups/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#prototype$updateAttributes
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/QrCodeGroups/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#createChangeStream
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/QrCodeGroups/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#getSchema
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/QrCodeGroups/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#getAbsoluteSchema
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/QrCodeGroups/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#save
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/QrCodeGroups/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#getDetailSchema
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/QrCodeGroups/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#getModelRelationSchema
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/QrCodeGroups/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use QrCode.qrCodeGroup() instead.
            "::get::QrCode::qrCodeGroup": {
              url: urlBase + "/QrCodes/:id/qrCodeGroup",
              method: "GET",
            },

            // INTERNAL. Use Department.qrCodeGroups.findById() instead.
            "::findById::Department::qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/qrCodeGroups/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.qrCodeGroups.destroyById() instead.
            "::destroyById::Department::qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/qrCodeGroups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.qrCodeGroups.updateById() instead.
            "::updateById::Department::qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/qrCodeGroups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.qrCodeGroups() instead.
            "::get::Department::qrCodeGroups": {
              isArray: true,
              url: urlBase + "/Departments/:id/qrCodeGroups",
              method: "GET",
            },

            // INTERNAL. Use Department.qrCodeGroups.create() instead.
            "::create::Department::qrCodeGroups": {
              url: urlBase + "/Departments/:id/qrCodeGroups",
              method: "POST",
            },

            // INTERNAL. Use Department.qrCodeGroups.createMany() instead.
            "::createMany::Department::qrCodeGroups": {
              isArray: true,
              url: urlBase + "/Departments/:id/qrCodeGroups",
              method: "POST",
            },

            // INTERNAL. Use Department.qrCodeGroups.destroyAll() instead.
            "::delete::Department::qrCodeGroups": {
              url: urlBase + "/Departments/:id/qrCodeGroups",
              method: "DELETE",
            },

            // INTERNAL. Use Department.qrCodeGroups.count() instead.
            "::count::Department::qrCodeGroups": {
              url: urlBase + "/Departments/:id/qrCodeGroups/count",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodeGroups.findById() instead.
            "::findById::Product::qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodeGroups/:fk",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodeGroups.destroyById() instead.
            "::destroyById::Product::qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodeGroups/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Product.qrCodeGroups.updateById() instead.
            "::updateById::Product::qrCodeGroups": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Products/:id/qrCodeGroups/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Product.qrCodeGroups() instead.
            "::get::Product::qrCodeGroups": {
              isArray: true,
              url: urlBase + "/Products/:id/qrCodeGroups",
              method: "GET",
            },

            // INTERNAL. Use Product.qrCodeGroups.create() instead.
            "::create::Product::qrCodeGroups": {
              url: urlBase + "/Products/:id/qrCodeGroups",
              method: "POST",
            },

            // INTERNAL. Use Product.qrCodeGroups.createMany() instead.
            "::createMany::Product::qrCodeGroups": {
              isArray: true,
              url: urlBase + "/Products/:id/qrCodeGroups",
              method: "POST",
            },

            // INTERNAL. Use Product.qrCodeGroups.destroyAll() instead.
            "::delete::Product::qrCodeGroups": {
              url: urlBase + "/Products/:id/qrCodeGroups",
              method: "DELETE",
            },

            // INTERNAL. Use Product.qrCodeGroups.count() instead.
            "::count::Product::qrCodeGroups": {
              url: urlBase + "/Products/:id/qrCodeGroups/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#updateOrCreate
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#update
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#destroyById
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#removeById
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCodeGroup` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.QrCodeGroup#modelName
        * @propertyOf lbServices.QrCodeGroup
        * @description
        * The name of the model represented by this $resource,
        * i.e. `QrCodeGroup`.
        */
        R.modelName = "QrCodeGroup";


            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#department
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Fetches belongsTo relation department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::QrCodeGroup::department"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#product
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Fetches belongsTo relation product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::QrCodeGroup::product"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.QrCodeGroup.qrCodes
     * @header lbServices.QrCodeGroup.qrCodes
     * @object
     * @description
     *
     * The object `QrCodeGroup.qrCodes` groups methods
     * manipulating `QrCode` instances related to `QrCodeGroup`.
     *
     * Call {@link lbServices.QrCodeGroup#qrCodes QrCodeGroup.qrCodes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup#qrCodes
             * @methodOf lbServices.QrCodeGroup
             *
             * @description
             *
             * Queries qrCodes of QrCodeGroup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::get::QrCodeGroup::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup.qrCodes#count
             * @methodOf lbServices.QrCodeGroup.qrCodes
             *
             * @description
             *
             * Counts qrCodes of QrCodeGroup.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.qrCodes.count = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::count::QrCodeGroup::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup.qrCodes#create
             * @methodOf lbServices.QrCodeGroup.qrCodes
             *
             * @description
             *
             * Creates a new instance in qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.create = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::create::QrCodeGroup::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup.qrCodes#createMany
             * @methodOf lbServices.QrCodeGroup.qrCodes
             *
             * @description
             *
             * Creates a new instance in qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.createMany = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::createMany::QrCodeGroup::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup.qrCodes#destroyAll
             * @methodOf lbServices.QrCodeGroup.qrCodes
             *
             * @description
             *
             * Deletes all qrCodes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodes.destroyAll = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::delete::QrCodeGroup::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup.qrCodes#destroyById
             * @methodOf lbServices.QrCodeGroup.qrCodes
             *
             * @description
             *
             * Delete a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.qrCodes.destroyById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::destroyById::QrCodeGroup::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup.qrCodes#findById
             * @methodOf lbServices.QrCodeGroup.qrCodes
             *
             * @description
             *
             * Find a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.findById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::findById::QrCodeGroup::qrCodes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.QrCodeGroup.qrCodes#updateById
             * @methodOf lbServices.QrCodeGroup.qrCodes
             *
             * @description
             *
             * Update a related item by id for qrCodes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for qrCodes
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCodes.updateById = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::updateById::QrCodeGroup::qrCodes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EarningHistory
 * @header lbServices.EarningHistory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EarningHistory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EarningHistory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/EarningHistories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use EarningHistory.qrCode() instead.
            "prototype$__get__qrCode": {
              url: urlBase + "/EarningHistories/:id/qrCode",
              method: "GET",
            },

            // INTERNAL. Use EarningHistory.retailer() instead.
            "prototype$__get__retailer": {
              url: urlBase + "/EarningHistories/:id/retailer",
              method: "GET",
            },

            // INTERNAL. Use EarningHistory.product() instead.
            "prototype$__get__product": {
              url: urlBase + "/EarningHistories/:id/product",
              method: "GET",
            },

            // INTERNAL. Use EarningHistory.department() instead.
            "prototype$__get__department": {
              url: urlBase + "/EarningHistories/:id/department",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#create
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EarningHistories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#createMany
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EarningHistories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#upsert
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/EarningHistories",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#exists
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EarningHistories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#findById
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EarningHistories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#find
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EarningHistories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#findOne
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EarningHistories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#updateAll
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/EarningHistories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#deleteById
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EarningHistories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#count
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EarningHistories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#prototype$updateAttributes
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/EarningHistories/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#createChangeStream
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EarningHistories/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#getSchema
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/EarningHistories/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#getAbsoluteSchema
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/EarningHistories/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#save
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/EarningHistories/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#getDetailSchema
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/EarningHistories/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#getModelRelationSchema
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/EarningHistories/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#findHistory
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Get the earning history of retailer
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             *  - `departmentId` – `{string=}` -
             *
             *  - `status` – `{string=}` -
             *
             *  - `cursor` – `{string=}` -
             *
             *  - `limit` – `{number=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Array of Earning History data. {data, cursor}
             */
            "findHistory": {
              url: urlBase + "/EarningHistories/findHistory",
              method: "POST",
            },

            // INTERNAL. Use QrCode.earningHistories.findById() instead.
            "::findById::QrCode::earningHistories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodes/:id/earningHistories/:fk",
              method: "GET",
            },

            // INTERNAL. Use QrCode.earningHistories.destroyById() instead.
            "::destroyById::QrCode::earningHistories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodes/:id/earningHistories/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use QrCode.earningHistories.updateById() instead.
            "::updateById::QrCode::earningHistories": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/QrCodes/:id/earningHistories/:fk",
              method: "PUT",
            },

            // INTERNAL. Use QrCode.earningHistories() instead.
            "::get::QrCode::earningHistories": {
              isArray: true,
              url: urlBase + "/QrCodes/:id/earningHistories",
              method: "GET",
            },

            // INTERNAL. Use QrCode.earningHistories.create() instead.
            "::create::QrCode::earningHistories": {
              url: urlBase + "/QrCodes/:id/earningHistories",
              method: "POST",
            },

            // INTERNAL. Use QrCode.earningHistories.createMany() instead.
            "::createMany::QrCode::earningHistories": {
              isArray: true,
              url: urlBase + "/QrCodes/:id/earningHistories",
              method: "POST",
            },

            // INTERNAL. Use QrCode.earningHistories.destroyAll() instead.
            "::delete::QrCode::earningHistories": {
              url: urlBase + "/QrCodes/:id/earningHistories",
              method: "DELETE",
            },

            // INTERNAL. Use QrCode.earningHistories.count() instead.
            "::count::QrCode::earningHistories": {
              url: urlBase + "/QrCodes/:id/earningHistories/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#updateOrCreate
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#update
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#destroyById
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#removeById
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EarningHistory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.EarningHistory#modelName
        * @propertyOf lbServices.EarningHistory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EarningHistory`.
        */
        R.modelName = "EarningHistory";


            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#qrCode
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Fetches belongsTo relation qrCode.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `QrCode` object.)
             * </em>
             */
        R.qrCode = function() {
          var TargetResource = $injector.get("QrCode");
          var action = TargetResource["::get::EarningHistory::qrCode"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#retailer
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Fetches belongsTo relation retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailer = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::get::EarningHistory::retailer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#product
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Fetches belongsTo relation product.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Product` object.)
             * </em>
             */
        R.product = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::EarningHistory::product"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.EarningHistory#department
             * @methodOf lbServices.EarningHistory
             *
             * @description
             *
             * Fetches belongsTo relation department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::EarningHistory::department"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SnaphyAcl
 * @header lbServices.SnaphyAcl
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SnaphyAcl` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SnaphyAcl",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/SnaphyAcls/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.findById() instead.
            "prototype$__findById__snaphyAclProps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps/:fk",
              method: "GET",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.destroyById() instead.
            "prototype$__destroyById__snaphyAclProps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.updateById() instead.
            "prototype$__updateById__snaphyAclProps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.findById() instead.
            "prototype$__findById__snaphyAclRelations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.destroyById() instead.
            "prototype$__destroyById__snaphyAclRelations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.updateById() instead.
            "prototype$__updateById__snaphyAclRelations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps() instead.
            "prototype$__get__snaphyAclProps": {
              isArray: true,
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps",
              method: "GET",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.create() instead.
            "prototype$__create__snaphyAclProps": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps",
              method: "POST",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.destroyAll() instead.
            "prototype$__delete__snaphyAclProps": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps",
              method: "DELETE",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.count() instead.
            "prototype$__count__snaphyAclProps": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps/count",
              method: "GET",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations() instead.
            "prototype$__get__snaphyAclRelations": {
              isArray: true,
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations",
              method: "GET",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.create() instead.
            "prototype$__create__snaphyAclRelations": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations",
              method: "POST",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.destroyAll() instead.
            "prototype$__delete__snaphyAclRelations": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations",
              method: "DELETE",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.count() instead.
            "prototype$__count__snaphyAclRelations": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#create
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SnaphyAcls",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#createMany
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SnaphyAcls",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#upsert
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SnaphyAcls",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#exists
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SnaphyAcls/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#findById
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SnaphyAcls/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#find
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SnaphyAcls",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#findOne
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SnaphyAcls/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#updateAll
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SnaphyAcls/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#deleteById
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SnaphyAcls/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#count
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SnaphyAcls/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#prototype$updateAttributes
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SnaphyAcls/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#createChangeStream
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SnaphyAcls/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#getSchema
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/SnaphyAcls/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#getAbsoluteSchema
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/SnaphyAcls/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#save
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/SnaphyAcls/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#getDetailSchema
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/SnaphyAcls/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#getModelRelationSchema
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/SnaphyAcls/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use SnaphyAclProp.snaphyAcl() instead.
            "::get::SnaphyAclProp::snaphyAcl": {
              url: urlBase + "/SnaphyAclProps/:id/snaphyAcl",
              method: "GET",
            },

            // INTERNAL. Use SnaphyAclRelation.snaphyAcl() instead.
            "::get::SnaphyAclRelation::snaphyAcl": {
              url: urlBase + "/SnaphyAclRelations/:id/snaphyAcl",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#updateOrCreate
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#update
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#destroyById
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#removeById
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SnaphyAcl#modelName
        * @propertyOf lbServices.SnaphyAcl
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SnaphyAcl`.
        */
        R.modelName = "SnaphyAcl";

    /**
     * @ngdoc object
     * @name lbServices.SnaphyAcl.snaphyAclProps
     * @header lbServices.SnaphyAcl.snaphyAclProps
     * @object
     * @description
     *
     * The object `SnaphyAcl.snaphyAclProps` groups methods
     * manipulating `SnaphyAclProp` instances related to `SnaphyAcl`.
     *
     * Call {@link lbServices.SnaphyAcl#snaphyAclProps SnaphyAcl.snaphyAclProps()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#snaphyAclProps
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Queries snaphyAclProps of SnaphyAcl.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
        R.snaphyAclProps = function() {
          var TargetResource = $injector.get("SnaphyAclProp");
          var action = TargetResource["::get::SnaphyAcl::snaphyAclProps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclProps#count
             * @methodOf lbServices.SnaphyAcl.snaphyAclProps
             *
             * @description
             *
             * Counts snaphyAclProps of SnaphyAcl.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.snaphyAclProps.count = function() {
          var TargetResource = $injector.get("SnaphyAclProp");
          var action = TargetResource["::count::SnaphyAcl::snaphyAclProps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclProps#create
             * @methodOf lbServices.SnaphyAcl.snaphyAclProps
             *
             * @description
             *
             * Creates a new instance in snaphyAclProps of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
        R.snaphyAclProps.create = function() {
          var TargetResource = $injector.get("SnaphyAclProp");
          var action = TargetResource["::create::SnaphyAcl::snaphyAclProps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclProps#createMany
             * @methodOf lbServices.SnaphyAcl.snaphyAclProps
             *
             * @description
             *
             * Creates a new instance in snaphyAclProps of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
        R.snaphyAclProps.createMany = function() {
          var TargetResource = $injector.get("SnaphyAclProp");
          var action = TargetResource["::createMany::SnaphyAcl::snaphyAclProps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclProps#destroyAll
             * @methodOf lbServices.SnaphyAcl.snaphyAclProps
             *
             * @description
             *
             * Deletes all snaphyAclProps of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.snaphyAclProps.destroyAll = function() {
          var TargetResource = $injector.get("SnaphyAclProp");
          var action = TargetResource["::delete::SnaphyAcl::snaphyAclProps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclProps#destroyById
             * @methodOf lbServices.SnaphyAcl.snaphyAclProps
             *
             * @description
             *
             * Delete a related item by id for snaphyAclProps.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for snaphyAclProps
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.snaphyAclProps.destroyById = function() {
          var TargetResource = $injector.get("SnaphyAclProp");
          var action = TargetResource["::destroyById::SnaphyAcl::snaphyAclProps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclProps#findById
             * @methodOf lbServices.SnaphyAcl.snaphyAclProps
             *
             * @description
             *
             * Find a related item by id for snaphyAclProps.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for snaphyAclProps
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
        R.snaphyAclProps.findById = function() {
          var TargetResource = $injector.get("SnaphyAclProp");
          var action = TargetResource["::findById::SnaphyAcl::snaphyAclProps"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclProps#updateById
             * @methodOf lbServices.SnaphyAcl.snaphyAclProps
             *
             * @description
             *
             * Update a related item by id for snaphyAclProps.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for snaphyAclProps
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
        R.snaphyAclProps.updateById = function() {
          var TargetResource = $injector.get("SnaphyAclProp");
          var action = TargetResource["::updateById::SnaphyAcl::snaphyAclProps"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SnaphyAcl.snaphyAclRelations
     * @header lbServices.SnaphyAcl.snaphyAclRelations
     * @object
     * @description
     *
     * The object `SnaphyAcl.snaphyAclRelations` groups methods
     * manipulating `SnaphyAclRelation` instances related to `SnaphyAcl`.
     *
     * Call {@link lbServices.SnaphyAcl#snaphyAclRelations SnaphyAcl.snaphyAclRelations()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl#snaphyAclRelations
             * @methodOf lbServices.SnaphyAcl
             *
             * @description
             *
             * Queries snaphyAclRelations of SnaphyAcl.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
        R.snaphyAclRelations = function() {
          var TargetResource = $injector.get("SnaphyAclRelation");
          var action = TargetResource["::get::SnaphyAcl::snaphyAclRelations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclRelations#count
             * @methodOf lbServices.SnaphyAcl.snaphyAclRelations
             *
             * @description
             *
             * Counts snaphyAclRelations of SnaphyAcl.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.snaphyAclRelations.count = function() {
          var TargetResource = $injector.get("SnaphyAclRelation");
          var action = TargetResource["::count::SnaphyAcl::snaphyAclRelations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclRelations#create
             * @methodOf lbServices.SnaphyAcl.snaphyAclRelations
             *
             * @description
             *
             * Creates a new instance in snaphyAclRelations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
        R.snaphyAclRelations.create = function() {
          var TargetResource = $injector.get("SnaphyAclRelation");
          var action = TargetResource["::create::SnaphyAcl::snaphyAclRelations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclRelations#createMany
             * @methodOf lbServices.SnaphyAcl.snaphyAclRelations
             *
             * @description
             *
             * Creates a new instance in snaphyAclRelations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
        R.snaphyAclRelations.createMany = function() {
          var TargetResource = $injector.get("SnaphyAclRelation");
          var action = TargetResource["::createMany::SnaphyAcl::snaphyAclRelations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclRelations#destroyAll
             * @methodOf lbServices.SnaphyAcl.snaphyAclRelations
             *
             * @description
             *
             * Deletes all snaphyAclRelations of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.snaphyAclRelations.destroyAll = function() {
          var TargetResource = $injector.get("SnaphyAclRelation");
          var action = TargetResource["::delete::SnaphyAcl::snaphyAclRelations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclRelations#destroyById
             * @methodOf lbServices.SnaphyAcl.snaphyAclRelations
             *
             * @description
             *
             * Delete a related item by id for snaphyAclRelations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for snaphyAclRelations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.snaphyAclRelations.destroyById = function() {
          var TargetResource = $injector.get("SnaphyAclRelation");
          var action = TargetResource["::destroyById::SnaphyAcl::snaphyAclRelations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclRelations#findById
             * @methodOf lbServices.SnaphyAcl.snaphyAclRelations
             *
             * @description
             *
             * Find a related item by id for snaphyAclRelations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for snaphyAclRelations
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
        R.snaphyAclRelations.findById = function() {
          var TargetResource = $injector.get("SnaphyAclRelation");
          var action = TargetResource["::findById::SnaphyAcl::snaphyAclRelations"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAcl.snaphyAclRelations#updateById
             * @methodOf lbServices.SnaphyAcl.snaphyAclRelations
             *
             * @description
             *
             * Update a related item by id for snaphyAclRelations.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for snaphyAclRelations
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
        R.snaphyAclRelations.updateById = function() {
          var TargetResource = $injector.get("SnaphyAclRelation");
          var action = TargetResource["::updateById::SnaphyAcl::snaphyAclRelations"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SnaphyAclProp
 * @header lbServices.SnaphyAclProp
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SnaphyAclProp` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SnaphyAclProp",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/SnaphyAclProps/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SnaphyAclProp.snaphyAcl() instead.
            "prototype$__get__snaphyAcl": {
              url: urlBase + "/SnaphyAclProps/:id/snaphyAcl",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#create
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SnaphyAclProps",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#createMany
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SnaphyAclProps",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#upsert
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SnaphyAclProps",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#exists
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SnaphyAclProps/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#findById
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SnaphyAclProps/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#find
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SnaphyAclProps",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#findOne
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SnaphyAclProps/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#updateAll
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SnaphyAclProps/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#deleteById
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SnaphyAclProps/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#count
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SnaphyAclProps/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#prototype$updateAttributes
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SnaphyAclProps/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#createChangeStream
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SnaphyAclProps/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#getSchema
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/SnaphyAclProps/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#getAbsoluteSchema
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/SnaphyAclProps/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#save
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/SnaphyAclProps/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#getDetailSchema
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/SnaphyAclProps/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#getModelRelationSchema
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/SnaphyAclProps/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.findById() instead.
            "::findById::SnaphyAcl::snaphyAclProps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps/:fk",
              method: "GET",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.destroyById() instead.
            "::destroyById::SnaphyAcl::snaphyAclProps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.updateById() instead.
            "::updateById::SnaphyAcl::snaphyAclProps": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps() instead.
            "::get::SnaphyAcl::snaphyAclProps": {
              isArray: true,
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps",
              method: "GET",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.create() instead.
            "::create::SnaphyAcl::snaphyAclProps": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps",
              method: "POST",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.createMany() instead.
            "::createMany::SnaphyAcl::snaphyAclProps": {
              isArray: true,
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps",
              method: "POST",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.destroyAll() instead.
            "::delete::SnaphyAcl::snaphyAclProps": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps",
              method: "DELETE",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclProps.count() instead.
            "::count::SnaphyAcl::snaphyAclProps": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclProps/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#updateOrCreate
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#update
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#destroyById
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#removeById
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclProp` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SnaphyAclProp#modelName
        * @propertyOf lbServices.SnaphyAclProp
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SnaphyAclProp`.
        */
        R.modelName = "SnaphyAclProp";


            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclProp#snaphyAcl
             * @methodOf lbServices.SnaphyAclProp
             *
             * @description
             *
             * Fetches belongsTo relation snaphyAcl.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
        R.snaphyAcl = function() {
          var TargetResource = $injector.get("SnaphyAcl");
          var action = TargetResource["::get::SnaphyAclProp::snaphyAcl"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SnaphyAclRelation
 * @header lbServices.SnaphyAclRelation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SnaphyAclRelation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SnaphyAclRelation",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/SnaphyAclRelations/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SnaphyAclRelation.snaphyAcl() instead.
            "prototype$__get__snaphyAcl": {
              url: urlBase + "/SnaphyAclRelations/:id/snaphyAcl",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#create
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SnaphyAclRelations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#createMany
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SnaphyAclRelations",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#upsert
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SnaphyAclRelations",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#exists
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SnaphyAclRelations/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#findById
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SnaphyAclRelations/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#find
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SnaphyAclRelations",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#findOne
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SnaphyAclRelations/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#updateAll
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SnaphyAclRelations/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#deleteById
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SnaphyAclRelations/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#count
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SnaphyAclRelations/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#prototype$updateAttributes
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SnaphyAclRelations/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#createChangeStream
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SnaphyAclRelations/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#getSchema
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/SnaphyAclRelations/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#getAbsoluteSchema
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/SnaphyAclRelations/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#save
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/SnaphyAclRelations/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#getDetailSchema
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/SnaphyAclRelations/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#getModelRelationSchema
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/SnaphyAclRelations/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.findById() instead.
            "::findById::SnaphyAcl::snaphyAclRelations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations/:fk",
              method: "GET",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.destroyById() instead.
            "::destroyById::SnaphyAcl::snaphyAclRelations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.updateById() instead.
            "::updateById::SnaphyAcl::snaphyAclRelations": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations/:fk",
              method: "PUT",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations() instead.
            "::get::SnaphyAcl::snaphyAclRelations": {
              isArray: true,
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations",
              method: "GET",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.create() instead.
            "::create::SnaphyAcl::snaphyAclRelations": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations",
              method: "POST",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.createMany() instead.
            "::createMany::SnaphyAcl::snaphyAclRelations": {
              isArray: true,
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations",
              method: "POST",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.destroyAll() instead.
            "::delete::SnaphyAcl::snaphyAclRelations": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations",
              method: "DELETE",
            },

            // INTERNAL. Use SnaphyAcl.snaphyAclRelations.count() instead.
            "::count::SnaphyAcl::snaphyAclRelations": {
              url: urlBase + "/SnaphyAcls/:id/snaphyAclRelations/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#updateOrCreate
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#update
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#destroyById
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#removeById
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAclRelation` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.SnaphyAclRelation#modelName
        * @propertyOf lbServices.SnaphyAclRelation
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SnaphyAclRelation`.
        */
        R.modelName = "SnaphyAclRelation";


            /**
             * @ngdoc method
             * @name lbServices.SnaphyAclRelation#snaphyAcl
             * @methodOf lbServices.SnaphyAclRelation
             *
             * @description
             *
             * Fetches belongsTo relation snaphyAcl.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SnaphyAcl` object.)
             * </em>
             */
        R.snaphyAcl = function() {
          var TargetResource = $injector.get("SnaphyAcl");
          var action = TargetResource["::get::SnaphyAclRelation::snaphyAcl"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ContactUs
 * @header lbServices.ContactUs
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ContactUs` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ContactUs",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ContactUs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ContactUs.retailer() instead.
            "prototype$__get__retailer": {
              url: urlBase + "/ContactUs/:id/retailer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#create
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ContactUs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#createMany
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ContactUs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#upsert
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ContactUs",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#exists
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ContactUs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#findById
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ContactUs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#find
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ContactUs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#findOne
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ContactUs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#updateAll
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ContactUs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#deleteById
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ContactUs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#count
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ContactUs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#prototype$updateAttributes
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ContactUs/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#createChangeStream
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ContactUs/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#getSchema
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/ContactUs/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#getAbsoluteSchema
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/ContactUs/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#save
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/ContactUs/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#getDetailSchema
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/ContactUs/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#getModelRelationSchema
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/ContactUs/getModelRelationSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#query
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Get the complaint/query to admin
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `ctx` – `{object=}` -
             *
             *  - `subject` – `{string=}` -
             *
             *  - `message` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * status of query
             */
            "query": {
              url: urlBase + "/ContactUs/query",
              method: "POST",
            },

            // INTERNAL. Use Retailer.contactUs.findById() instead.
            "::findById::Retailer::contactUs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/contactUs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Retailer.contactUs.destroyById() instead.
            "::destroyById::Retailer::contactUs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/contactUs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.contactUs.updateById() instead.
            "::updateById::Retailer::contactUs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Retailers/:id/contactUs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Retailer.contactUs() instead.
            "::get::Retailer::contactUs": {
              isArray: true,
              url: urlBase + "/Retailers/:id/contactUs",
              method: "GET",
            },

            // INTERNAL. Use Retailer.contactUs.create() instead.
            "::create::Retailer::contactUs": {
              url: urlBase + "/Retailers/:id/contactUs",
              method: "POST",
            },

            // INTERNAL. Use Retailer.contactUs.createMany() instead.
            "::createMany::Retailer::contactUs": {
              isArray: true,
              url: urlBase + "/Retailers/:id/contactUs",
              method: "POST",
            },

            // INTERNAL. Use Retailer.contactUs.destroyAll() instead.
            "::delete::Retailer::contactUs": {
              url: urlBase + "/Retailers/:id/contactUs",
              method: "DELETE",
            },

            // INTERNAL. Use Retailer.contactUs.count() instead.
            "::count::Retailer::contactUs": {
              url: urlBase + "/Retailers/:id/contactUs/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ContactUs#updateOrCreate
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#update
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#destroyById
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ContactUs#removeById
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ContactUs` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.ContactUs#modelName
        * @propertyOf lbServices.ContactUs
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ContactUs`.
        */
        R.modelName = "ContactUs";


            /**
             * @ngdoc method
             * @name lbServices.ContactUs#retailer
             * @methodOf lbServices.ContactUs
             *
             * @description
             *
             * Fetches belongsTo relation retailer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Retailer` object.)
             * </em>
             */
        R.retailer = function() {
          var TargetResource = $injector.get("Retailer");
          var action = TargetResource["::get::ContactUs::retailer"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.DepartmentTransaction
 * @header lbServices.DepartmentTransaction
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DepartmentTransaction` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "DepartmentTransaction",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/DepartmentTransactions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use DepartmentTransaction.department() instead.
            "prototype$__get__department": {
              url: urlBase + "/DepartmentTransactions/:id/department",
              method: "GET",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.findById() instead.
            "prototype$__findById__retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions/:fk",
              method: "GET",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.destroyById() instead.
            "prototype$__destroyById__retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.updateById() instead.
            "prototype$__updateById__retailerTransactions": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions/:fk",
              method: "PUT",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions() instead.
            "prototype$__get__retailerTransactions": {
              isArray: true,
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions",
              method: "GET",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.create() instead.
            "prototype$__create__retailerTransactions": {
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions",
              method: "POST",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.destroyAll() instead.
            "prototype$__delete__retailerTransactions": {
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions",
              method: "DELETE",
            },

            // INTERNAL. Use DepartmentTransaction.retailerTransactions.count() instead.
            "prototype$__count__retailerTransactions": {
              url: urlBase + "/DepartmentTransactions/:id/retailerTransactions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#create
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/DepartmentTransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#createMany
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/DepartmentTransactions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#upsert
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/DepartmentTransactions",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#exists
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/DepartmentTransactions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#findById
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/DepartmentTransactions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#find
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/DepartmentTransactions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#findOne
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/DepartmentTransactions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#updateAll
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/DepartmentTransactions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#deleteById
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/DepartmentTransactions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#count
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/DepartmentTransactions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#prototype$updateAttributes
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/DepartmentTransactions/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#createChangeStream
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/DepartmentTransactions/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#getSchema
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/DepartmentTransactions/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#getAbsoluteSchema
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/DepartmentTransactions/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#save
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/DepartmentTransactions/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#getDetailSchema
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/DepartmentTransactions/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#getModelRelationSchema
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/DepartmentTransactions/getModelRelationSchema",
              method: "POST",
            },

            // INTERNAL. Use RetailerTransaction.departmentTransaction() instead.
            "::get::RetailerTransaction::departmentTransaction": {
              url: urlBase + "/RetailerTransactions/:id/departmentTransaction",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#updateOrCreate
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#update
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#destroyById
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#removeById
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DepartmentTransaction` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.DepartmentTransaction#modelName
        * @propertyOf lbServices.DepartmentTransaction
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DepartmentTransaction`.
        */
        R.modelName = "DepartmentTransaction";


            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#department
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Fetches belongsTo relation department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::DepartmentTransaction::department"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DepartmentTransaction.retailerTransactions
     * @header lbServices.DepartmentTransaction.retailerTransactions
     * @object
     * @description
     *
     * The object `DepartmentTransaction.retailerTransactions` groups methods
     * manipulating `RetailerTransaction` instances related to `DepartmentTransaction`.
     *
     * Call {@link lbServices.DepartmentTransaction#retailerTransactions DepartmentTransaction.retailerTransactions()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction#retailerTransactions
             * @methodOf lbServices.DepartmentTransaction
             *
             * @description
             *
             * Queries retailerTransactions of DepartmentTransaction.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::get::DepartmentTransaction::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction.retailerTransactions#count
             * @methodOf lbServices.DepartmentTransaction.retailerTransactions
             *
             * @description
             *
             * Counts retailerTransactions of DepartmentTransaction.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.retailerTransactions.count = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::count::DepartmentTransaction::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction.retailerTransactions#create
             * @methodOf lbServices.DepartmentTransaction.retailerTransactions
             *
             * @description
             *
             * Creates a new instance in retailerTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.create = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::create::DepartmentTransaction::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction.retailerTransactions#createMany
             * @methodOf lbServices.DepartmentTransaction.retailerTransactions
             *
             * @description
             *
             * Creates a new instance in retailerTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.createMany = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::createMany::DepartmentTransaction::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction.retailerTransactions#destroyAll
             * @methodOf lbServices.DepartmentTransaction.retailerTransactions
             *
             * @description
             *
             * Deletes all retailerTransactions of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.retailerTransactions.destroyAll = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::delete::DepartmentTransaction::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction.retailerTransactions#destroyById
             * @methodOf lbServices.DepartmentTransaction.retailerTransactions
             *
             * @description
             *
             * Delete a related item by id for retailerTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailerTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.retailerTransactions.destroyById = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::destroyById::DepartmentTransaction::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction.retailerTransactions#findById
             * @methodOf lbServices.DepartmentTransaction.retailerTransactions
             *
             * @description
             *
             * Find a related item by id for retailerTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailerTransactions
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.findById = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::findById::DepartmentTransaction::retailerTransactions"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DepartmentTransaction.retailerTransactions#updateById
             * @methodOf lbServices.DepartmentTransaction.retailerTransactions
             *
             * @description
             *
             * Update a related item by id for retailerTransactions.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             *  - `fk` – `{*}` - Foreign key for retailerTransactions
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RetailerTransaction` object.)
             * </em>
             */
        R.retailerTransactions.updateById = function() {
          var TargetResource = $injector.get("RetailerTransaction");
          var action = TargetResource["::updateById::DepartmentTransaction::retailerTransactions"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Setting
 * @header lbServices.Setting
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Setting` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Setting",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Settings/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Setting#create
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Settings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#createMany
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Settings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#upsert
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Settings",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#exists
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Settings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#findById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Find a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Settings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#find
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Settings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#findOne
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Settings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#updateAll
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Settings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#deleteById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Settings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#count
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Settings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#prototype$updateAttributes
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - SnaphyBase id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Settings/:id",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#createChangeStream
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Settings/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#getSchema
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Send the schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getSchema": {
              url: urlBase + "/Settings/getSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#getAbsoluteSchema
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Send the absolute schema of the model requested.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getAbsoluteSchema": {
              url: urlBase + "/Settings/getAbsoluteSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#save
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Remote method for saving data with its depedencies
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` -
             *
             *  - `schema` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "save": {
              url: urlBase + "/Settings/save",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#getDetailSchema
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Get the detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getDetailSchema": {
              url: urlBase + "/Settings/getDetailSchema",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Setting#getModelRelationSchema
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Get the relation detail schema for a particular model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `schema` – `{object=}` -
             */
            "getModelRelationSchema": {
              url: urlBase + "/Settings/getModelRelationSchema",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Setting#updateOrCreate
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Setting#update
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Update instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Setting#destroyById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Setting#removeById
             * @methodOf lbServices.Setting
             *
             * @description
             *
             * Delete a model instance by id from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Setting` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];


        /**
        * @ngdoc property
        * @name lbServices.Setting#modelName
        * @propertyOf lbServices.Setting
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Setting`.
        */
        R.modelName = "Setting";



        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
